<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
 
 <title>JCK's Blog</title>
 <link href="http://jckermagoret.github.io/" rel="self"/>
 <link href="http://jckermagoret.github.io"/>
 <updated>2014-09-08T05:41:29+02:00</updated>
 <id>http://jckermagoret.github.io</id>
 <author>
   <name>Jean-Christophe KERMAGORET</name>
   <email>jc@kermagoret.net</email>
 </author>

 
 <entry>
   <title>Testing server side javascript with qunit and junit</title>
   <link href="http://jckermagoret.github.io/blogs/blog-jckermagoret/2014/09/05/Testing-server-side-javascript-with-qunit-and-junit"/>
   <updated>2014-09-05T00:00:00+02:00</updated>
   <id>http://jckermagoret.github.io/blogs/blog-jckermagoret/2014/09/05/Testing-server-side-javascript-with-qunit-and-junit</id>
   <content type="html">&lt;h1&gt;Introduction&lt;/h1&gt;

&lt;p&gt;This tutorial aims at testing server side javascript on Alfresco and Alfresco Share through BDD test for Behavioral Development Driven.&lt;/p&gt;

&lt;p&gt;Such a test looks like the following:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;pavlov.specify(&quot;AutoComplete Test Set&quot;, function() {
    describe(&quot;Should be able to automatically update meta data ...&quot;, function() {

        var doc;

        function fail(msg) {
            $Logger.debug(msg);
            assert(true).equals(false);
        };

        before(function() {
        });

        after(function() {
        });

        it(&quot;for MarchesPublics:ECategory type&quot;, function() {
            fail(&quot;Not yet implemented&quot;);
        });

        it(&quot;for MarchesPublics:EPayment type&quot;, function() {
            fail(&quot;Not yet implemented&quot;);
        });

        it(&quot;for MarchesPublics:EOrganization type&quot;, function() {
            fail(&quot;Not yet implemented&quot;);
        });

    });
});
&lt;/code&gt;&lt;/pre&gt;

&lt;h1&gt;Development process&lt;/h1&gt;

&lt;h2&gt;Usual way&lt;/h2&gt;

&lt;p&gt;I won't detail here why writing tests is important. Such a subject is already well documented.&lt;/p&gt;

&lt;h3&gt;Code Example&lt;/h3&gt;

&lt;p&gt;Just know a developer always write some tests to check its code, generally of the form :&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;print(new Date());
print(&quot;Start&quot;);

r = some code

print(&quot;Result = &quot; + r)
print(&quot;End&quot;)
&lt;/code&gt;&lt;/pre&gt;

&lt;h3&gt;+ and -&lt;/h3&gt;

&lt;h4&gt;Drawbacks&lt;/h4&gt;

&lt;p&gt;This approach has several drawbacks:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;No level: logs are always displayed,&lt;/li&gt;
&lt;li&gt;When the code is ok, logs are removed : need to rewrite them for the next debug iteration,&lt;/li&gt;
&lt;li&gt;No IDE integration,&lt;/li&gt;
&lt;li&gt;No CI integration,&lt;/li&gt;
&lt;li&gt;No unit test,&lt;/li&gt;
&lt;li&gt;No history.&lt;/li&gt;
&lt;/ul&gt;


&lt;h2&gt;An improved way&lt;/h2&gt;

&lt;p&gt;Imagine a $Logger object is available. The same code than before could be written the following way:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$Logger.debug(&quot;Start&quot;);

r = some code

$Logger.debug(&quot;End&quot;);
&lt;/code&gt;&lt;/pre&gt;

&lt;h3&gt;+ and -&lt;/h3&gt;

&lt;h4&gt;Advantages&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;$Logger automatically adapts itself to context, so messages are displayed in a console for interactive development phase or not if code is executed in production&lt;/li&gt;
&lt;li&gt;logs are automatically prefixed by date and time&lt;/li&gt;
&lt;li&gt;logs are structured with levels so it is possible to selectively trace them to only have the interesting level&lt;/li&gt;
&lt;/ul&gt;


&lt;h4&gt;Drawbacks&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;Still no IDE integration,&lt;/li&gt;
&lt;li&gt;No CI integration,&lt;/li&gt;
&lt;li&gt;No unit test,&lt;/li&gt;
&lt;li&gt;No history&lt;/li&gt;
&lt;/ul&gt;


&lt;h2&gt;A more improved way&lt;/h2&gt;

&lt;p&gt;Logs are very important but aren't tests. Numerous frameworks exist to develop some tests. They generally provide a way to automate tests by extracting information from source code so they know the methods to tests.&lt;/p&gt;

&lt;p&gt;jQUery uses a framework called qUnit. This one enables the developer to write unit tests the following way:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;QUnit.test( &quot;ok test&quot;, function( assert ) {
    assert.ok( true, &quot;true succeeds&quot; );
    assert.ok( &quot;non-empty&quot;, &quot;non-empty string succeeds&quot; );
    assert.ok( false, &quot;false fails&quot; );
    assert.ok( 0, &quot;0 fails&quot; );
    assert.ok( NaN, &quot;NaN fails&quot; );
    assert.ok( &quot;&quot;, &quot;empty string fails&quot; );
    assert.ok( null, &quot;null fails&quot; );
    assert.ok( undefined, &quot;undefined fails&quot; );
});
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This approach is interesting but lacks some kind of glue to make this more functional and user oriented. BDD or Behavior Driven Development brings this lacking part and provides the following sugar:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;pavlov.specify(&quot;AutoComplete Test Set&quot;, function() {
    describe(&quot;Should be able to automatically update meta data ...&quot;, function() {

        var doc;

        function fail(msg) {
            $Logger.debug(msg);
            assert(true).equals(false);
        };

        before(function() {
        });

        after(function() {
        });

        it(&quot;for MarchesPublics:ECategory type&quot;, function() {
            fail(&quot;Not yet implemented);
        });

        it(&quot;for MarchesPublics:EPayment type&quot;, function() {
            fail(&quot;Not yet implemented);
        });

        it(&quot;for MarchesPublics:EOrganization type&quot;, function() {
            fail(&quot;Not yet implemented);
        });

    });
});
&lt;/code&gt;&lt;/pre&gt;

&lt;h3&gt;+ and -&lt;/h3&gt;

&lt;h4&gt;Advantages&lt;/h4&gt;

&lt;p&gt;These tests may be written by a user, the developer implementing them to make them succeed. Results look like this:&lt;/p&gt;

&lt;p&gt;Tests may be done in a continuous integration build but results and historized (at least in an interesting and usable way).&lt;/p&gt;

&lt;h4&gt;Drawbacks&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;No IDE integration&lt;/li&gt;
&lt;li&gt;No history&lt;/li&gt;
&lt;/ul&gt;


&lt;h2&gt;The graal&lt;/h2&gt;

&lt;p&gt;We only lack 2 features:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;IDE integration&lt;/li&gt;
&lt;li&gt;Test History&lt;/li&gt;
&lt;/ul&gt;


&lt;h3&gt;IDE integration&lt;/h3&gt;

&lt;p&gt;IDE integration simply means to have a way to play tests from the IDE. It may be done through the use of external scripts in SIDE for example, based on Eclipse:&lt;/p&gt;

&lt;div class=&quot;screenshot&quot;&gt;
&lt;img src=&quot;/blogs/blog-jckermagoret/images/2014-09-05/SIDE-Test.png&quot;&gt;
&lt;/div&gt;


&lt;p&gt;Please note:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Tests are launched from the menu&lt;/li&gt;
&lt;li&gt;Output is done into the Alfresco log file as you can see at the bottom. Logs are also written in xml unit.&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;A more tight integration could be done through the use of jUnit, widely supported in the IDE's world. It should be interesting to integrate our server side js tests as jUnit tests so we can benefit from IDE views. It has not been done yet, but it's on the roadmap :-)&lt;/p&gt;

&lt;h3&gt;History&lt;/h3&gt;

&lt;p&gt;History must be played at each build and graph should display results in a historized view so developers and users may see how succeeding tests evolve :&lt;/p&gt;

&lt;div class=&quot;screenshot&quot;&gt;
&lt;img src=&quot;/blogs/blog-jckermagoret/images/2014-09-05/unitth-2.png&quot;&gt;
&lt;/div&gt;


&lt;h1&gt;Ressources&lt;/h1&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;http://en.wikipedia.org/wiki/Behavior-driven_development&quot;&gt;BDD in english&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://fr.wikipedia.org/wiki/Behavior_Driven_Development&quot;&gt;BDD en fran√ßais&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/mmonteleone/pavlov&quot;&gt;Pavlov&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

</content>
 </entry>
 
 <entry>
   <title>How to test server side javascript with qunit and pavlov</title>
   <link href="http://jckermagoret.github.io/blogs/blog-jckermagoret/2014/09/05/How-to-test-server-side-javascript-with-qunit-and-pavlov"/>
   <updated>2014-09-05T00:00:00+02:00</updated>
   <id>http://jckermagoret.github.io/blogs/blog-jckermagoret/2014/09/05/How-to-test-server-side-javascript-with-qunit-and-pavlov</id>
   <content type="html">&lt;h1&gt;Introduction&lt;/h1&gt;

&lt;p&gt;qUnit and pavlov have been slightly modified so they can be run into a server side javascript. Modifications consist in:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;creating a window object so the library believes it is runnning into a browser,&lt;/li&gt;
&lt;li&gt;adding a renderer so the output is either in plain text, to run it in debug mode, or in xml unit format to integrate it into existing&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;The corresponding libraries must be loaded.&lt;/p&gt;

&lt;h1&gt;Pavlov Test script&lt;/h1&gt;

&lt;p&gt;```&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;lt;import resource=&quot;classpath:alfresco/webscripts/extension/js/org/bluedolmen/utils/Logger.js&quot;&amp;gt;
&amp;lt;import resource=&quot;classpath:alfresco/webscripts/extension/js/external/bluedolmen-qunit/src/bluedolmen-qunit-headless.js&quot;&amp;gt;
&amp;lt;import resource=&quot;classpath:alfresco/webscripts/extension/js/external/bluedolmen-qunit-pavlov.js&quot;&amp;gt;
&amp;lt;import resource=&quot;classpath:alfresco/webscripts/extension/js/external/bluedolmen-qunit/test/bluedolmen-postload.js&quot;&amp;gt;
&amp;lt;import resource=&quot;classpath:alfresco/webscripts/extension/js/external/qunit-reporter-junit.js&quot;&amp;gt;

&amp;lt;import resource=&quot;classpath:alfresco/webscripts/extension/js/external/yaml.min.js&quot;&amp;gt;
&amp;lt;import resource=&quot;classpath:alfresco/webscripts/extension/js/org/bluedolmen/alfresco/rule/AutoComplete.js&quot;&amp;gt;

&amp;lt;import resource=&quot;classpath:alfresco/webscripts/extension/js/org/bluedolmen/Base.js&quot;&amp;gt;

//$Logger.LEVEL.DEBUG = false;

QUnit.specify.globalApi = true;

QUnit.jUnitReport = function(data) {
    var console = logger;
    if (console) {
        console.log(data.xml);
    }
};

pavlov.specify(&quot;AutoComplete Test Set&quot;, function() {
    describe(&quot;Should be able to update a document with...&quot;, function() {

        var doc;

        function fail(msg) {
            $Logger.debug(msg);
            assert(true).equals(false);
        };

        before(function() {
            $Logger.debug(&quot;-&amp;gt;Before&quot;);
            //doc = search.findNode(&quot;workspace://SpacesStore/0b0139b3-7cb0-49f2-8429-c21f542f1f08&quot;);
            doc = search.findNode(&quot;workspace://SpacesStore/35ceacd8-bb9e-45c0-be53-2d9844b54758&quot;);

            // Create a dataList item, a doc, a calendarEvent, a post, a page, a link...
        });

        after(function() {
            $Logger.debug(&quot;--&amp;gt; After&quot;);
        });

        it(&quot;must work with the provided rule&quot;, function() {
            var updatedProp = $AutoComplete.checkAndUpdate(
                doc,
                &quot;MarchesPublics:ECategoriesDuMarche # cm:name = ${MarchesPublics:AspectMarche_libelleLong} (${MarchesPublics:AspectMarche_libelleCourt})&quot;
            );
            $Logger.debug(&quot;UpdatedProp = &quot; + updatedProp);
            assert(doc.properties[&quot;cm:name&quot;]).equals(updatedProp);
        });

        it(&quot;must work with a rule from bluedolmen/dataLists path in the same site&quot;, function() {
            var updatedProp;

            var rule = $AutoComplete.getRewritesFromBlueDolmenDataLists(doc);
            $Logger.log(&quot;Main : Rule = &quot; + rule);

            if (undefined != rule &amp;amp;&amp;amp; null != rule) {
                updatedProp = $AutoComplete.update(doc, rule);
            }

            $Logger.debug(&quot;UpdatedProp = &quot; + updatedProp);
            assert(doc.properties[&quot;cm:name&quot;]).equals(updatedProp);
        });
    });
});

QUnit.load();
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;```&lt;/p&gt;

&lt;p&gt;Triple slash '///' are replaced when scripts are copied from my workspace to alfresco webscripts extension directory. We write import statements this way otherwise SIDE doesn't recognise js and methods.&lt;/p&gt;

&lt;h1&gt;IDE Integration&lt;/h1&gt;

&lt;div class=&quot;screenshot&quot;&gt;
&lt;img src=&quot;/blogs/blog-jckermagoret/images/2014-09-05/SIDE-Test.png&quot;&gt;
&lt;/div&gt;


&lt;h2&gt;Launch tests&lt;/h2&gt;

&lt;p&gt;We wrote a small library that enables us to execute js code by providing it to a webscript. We then simply call it trough the following form:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;#!/bin/bash

JS_FILE=$1
ADMIN_PASSWD=admin
HOST=http://localhost:8080
QUERY=/alfresco/service/bluedolmen/javascript/executer
URL=${HOST}${QUERY}

touch ${JS_FILE}; # if not, a cache seems to be present
curl -u admin:${ADMIN_PASSWD} -F &quot;script=@${JS_FILE}&quot; ${URL}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The provided script is then loaded on the alfresco server and played.&lt;/p&gt;

&lt;p&gt;We defined external scripts in SIDE, named console1.js, console2.js... which calls this previous script with the corresponding code. It allows us to always use our IDE with usual procedures to write, test and version source code.&lt;/p&gt;

&lt;h2&gt;Debugging&lt;/h2&gt;

&lt;p&gt;By looking at Alfresco output into SIDE, we can see logs and analyse variable values. While less interactive than the javascript debugger, this approach presents the advantage to be activated by an administrator who can then follow-up its content to our team to help debugging.&lt;/p&gt;

&lt;p&gt;By selectively choosing the log level through the javascript console, it's possible to immediately have more or less information in production mode.&lt;/p&gt;

&lt;h1&gt;Conclusion&lt;/h1&gt;

&lt;p&gt;This tutorial showed you how to install your SIDE installation so you can develop and test your server side javascript in your preferred IDE. It allows you to use your toolbox the usual way, especially versioning tools.&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>D√©mat√©rialiser (ex√©cution) une demande de validation par le SG</title>
   <link href="http://jckermagoret.github.io/blogs/blog-jckermagoret/2014/09/02/Dematerialisation-2-execution"/>
   <updated>2014-09-02T00:00:00+02:00</updated>
   <id>http://jckermagoret.github.io/blogs/blog-jckermagoret/2014/09/02/Dematerialisation-2-execution</id>
   <content type="html">&lt;h1&gt;Introduction&lt;/h1&gt;

&lt;p&gt;Ce document fait suite au &lt;a href=&quot;/blogs/blog-jckermagoret/2014/09/01/Dematerialisation-1-definition&quot;&gt;tutoriel&lt;/a&gt; d√©crivant la d√©finition d'un processus sur Alfresco avec Blue Parapheur.&lt;/p&gt;

&lt;p&gt;Ce document d√©crit l'ex√©cution d'un processus de d√©mat√©rialisation con√ßu avec Blue Parapheur.&lt;/p&gt;

&lt;p&gt;Apr√®s sa d√©finition, le processus est imm√©diatement disponible, sans aucune action d'aucune sorte de compilation, d√©ploiement...&lt;/p&gt;

&lt;p&gt;Les √©crans suivants s'enchainent alors :&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Lancement du processus sur un r√©pertoire contenant une demande d'achat (formulaire de demande, devis pdf...)&lt;/li&gt;
&lt;li&gt;S√©lection du processus de validation en 2 √©tapes&lt;/li&gt;
&lt;li&gt;S√©lection du premier approbateur&lt;/li&gt;
&lt;li&gt;Demande de correction car la demande est incorrecte&lt;/li&gt;
&lt;li&gt;Retour au premier approbateur&lt;/li&gt;
&lt;li&gt;Validation par le premier approbateur&lt;/li&gt;
&lt;li&gt;S√©lection du second acteur&lt;/li&gt;
&lt;li&gt;Validation par le second approbateur&lt;/li&gt;
&lt;li&gt;Diffusion par l'initiateur&lt;/li&gt;
&lt;li&gt;V√©rification de la tra√ßabilit√©&lt;/li&gt;
&lt;/ul&gt;


&lt;h1&gt;D√©roulement du processus&lt;/h1&gt;

&lt;h2&gt;Lancement du processus&lt;/h2&gt;

&lt;div class=&quot;screenshot&quot;&gt;
&lt;img alt=&quot;Lancement du processus&quot; src=&quot;/blogs/blog-jckermagoret/images/2014-09-01/execute-processus-010-lancement.png&quot;&gt;
&lt;/div&gt;


&lt;h2&gt;S√©lection du processus de validation en 2 √©tapes&lt;/h2&gt;

&lt;div class=&quot;screenshot&quot;&gt;
&lt;img src=&quot;/blogs/blog-jckermagoret/images/2014-09-01/execute-processus-012-selection.png&quot;&gt;
&lt;/div&gt;


&lt;p&gt;Il est √©galement possible d'indiquer :&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;des acteurs pour diffusion. Dans ce cas, un accus√© de r√©ception notifiera l'initiateur de la  prise de connaissance du document par le destinaire ;&lt;/li&gt;
&lt;li&gt;des acteurs pour consultation. Aucun accus√© de r√©ception ne sera notifi√©.&lt;/li&gt;
&lt;/ul&gt;


&lt;h2&gt;S√©lection du premier approbateur&lt;/h2&gt;

&lt;p&gt;En cliquant sur le bouton &quot;Intervenants initiaux&quot;, l'√©cran suivant s'affiche, permettant de s√©lectionner dans l'annuaire issu de votre organisation (Active Directory, Ldap...) le(s) premier(s) approbateur(s) :&lt;/p&gt;

&lt;div class=&quot;screenshot&quot;&gt;
&lt;img src=&quot;/blogs/blog-jckermagoret/images/2014-09-01/execute-processus-012-selection-destinataire-initial.png&quot;&gt;
&lt;/div&gt;


&lt;h2&gt;Premier approbateur / Tableau de bord / Mes t√¢ches&lt;/h2&gt;

&lt;p&gt;Lorsqu'il se connecte, le premier approbateur qu'il a une t√¢che √† r√©aliser :&lt;/p&gt;

&lt;div class=&quot;screenshot&quot;&gt;
&lt;img src=&quot;/blogs/blog-jckermagoret/images/2014-09-01/execute-processus-020-tdb-mes-taches.png&quot;&gt;
&lt;/div&gt;


&lt;p&gt;En cliquant sur cette t√¢che, il acc√®de directement √† la demande.&lt;/p&gt;

&lt;h2&gt;Premier approbateur / Consultation de la demande&lt;/h2&gt;

&lt;p&gt;L'approbateur peut consulter les d√©tails de la demande, contenus dans le r√©pertoire correspondant.&lt;/p&gt;

&lt;div class=&quot;screenshot&quot;&gt;
&lt;img alt=&quot;Ic√¥ne pour r√©aliser l'action documentaire&quot; src=&quot;/blogs/blog-jckermagoret/images/2014-09-01/execute-processus-022-consultation.png&quot;&gt;
&lt;/div&gt;


&lt;p&gt;L'approbateur peut alors effectuer l'action &quot;R√©aliser ma t√¢che documentaire&quot;.&lt;/p&gt;

&lt;h2&gt;Demande de correction car la demande est incorrecte&lt;/h2&gt;

&lt;p&gt;En cliquant sur l'action &quot;R√©aliser ma t√¢che documentaire&quot;, l'√©cran suivant s'affiche :&lt;/p&gt;

&lt;div class=&quot;screenshot&quot;&gt;
&lt;img alt=&quot;Refus de la validation&quot; src=&quot;/blogs/blog-jckermagoret/images/2014-09-01/execute-processus-024-refus.png&quot;&gt;
&lt;/div&gt;


&lt;p&gt;L'acteur (actuellement) approbateur ayant constat√© une erreur dans les dates refuse de valider la proposition et demande une correction en appuaynt sur le bouton &quot;Refuser&quot;. Il est possible de modifier les intitul√©s des boutons soit au niveau de la d√©finition du processus, soit au niveau de la d√©finition de chaque t√¢che afin d'avoir un comportement correspondant exactement √† vos besoins.&lt;/p&gt;

&lt;h2&gt;Retour √† l'initiateur de la demande&lt;/h2&gt;

&lt;p&gt;L'initiateur de la demande constate qu'il a une t√¢che sur son tableau de bord, comme l'avait constat√© auparavant le premier approbateur. En cliquant sur &quot;R√©aliser ma t√¢che documentaire&quot;, l'√©cran suivant s'affiche pour l'initiateur qui peut ainsi indiquer qu'il a fini sa correction. Celui-ci n'a pas la possibilit√© d'abandonner le processus √† cet instant. On peut facilement ajouter cette action √† cette √©tape en activant l'option correspondante dans la d√©finition de la t√¢che.&lt;/p&gt;

&lt;div class=&quot;screenshot&quot;&gt;
&lt;img alt=&quot;Etape de correction&quot; src=&quot;/blogs/blog-jckermagoret/images/2014-09-01/execute-processus-024-correction-ok.png&quot;&gt;
&lt;/div&gt;


&lt;h2&gt;Retour au premier approbateur pour validation&lt;/h2&gt;

&lt;p&gt;L'approbateur clique sur le d√©tail de la demande √† partir de son tableau de bort pour traiter cette nouvelle t√¢che. Il clique alors sur l'action &quot;R√©aliser ma t√¢che documentaire&quot; qui affiche l'√©cran suivant :&lt;/p&gt;

&lt;div class=&quot;screenshot&quot;&gt;
&lt;img alt=&quot;Etape de validation&quot; src=&quot;/blogs/blog-jckermagoret/images/2014-09-01/execute-processus-028-validation.png&quot;&gt;
&lt;/div&gt;


&lt;p&gt;Tant qu'il n'a pas s√©lectionn√© l'intervenant suivant, il ne peut approuver la demande. Il peut avant de valider effectuer les t√¢ches suivantes :&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Afficher le processus, afin de voir le cycle de validation du document&lt;/li&gt;
&lt;li&gt;Visualiser les d√©tails du processus, afin de consulter les √©tapes ayant permis d'arriver jusqu'√† lui :&lt;/li&gt;
&lt;/ul&gt;


&lt;div class=&quot;screenshot&quot;&gt;
&lt;img alt=&quot;Historique de validation&quot; src=&quot;/blogs/blog-jckermagoret/images/2014-09-01/execute-processus-029-historique.png&quot;&gt;
&lt;/div&gt;


&lt;p&gt;Il d√©cide alors de s√©lectionner l'intervenant suivant.&lt;/p&gt;

&lt;h2&gt;Validation par le second approbateur&lt;/h2&gt;

&lt;p&gt;Cet acteur acc√®de √† ses t√¢ches √† partir de son tableau de bord et r√©alise ses t√¢ches documentaires. En l'occurrence, comme la demande lui convient, il la valide. Il n'a pas besoin de s√©lectionner un nouvel acteur √† ce niveau car la derni√®re t√¢che de diffusion revient √† l'acteur initial :&lt;/p&gt;

&lt;div class=&quot;screenshot&quot;&gt;
&lt;img alt=&quot;Etape de validation finale&quot; src=&quot;/blogs/blog-jckermagoret/images/2014-09-01/execute-processus-030-validation-finale.png&quot;&gt;
&lt;/div&gt;


&lt;h2&gt;Diffusion par l'initiateur&lt;/h2&gt;

&lt;p&gt;L'acteur initial ayant lanc√© le processus traite la derni√®re t√¢che de diffusion :&lt;/p&gt;

&lt;div class=&quot;screenshot&quot;&gt;
&lt;img alt=&quot;Etape de diffusion&quot; src=&quot;/blogs/blog-jckermagoret/images/2014-09-01/execute-processus-031-diffusion-finale.png&quot;&gt;
&lt;/div&gt;


&lt;h2&gt;V√©rification de la tra√ßabilit√©&lt;/h2&gt;

&lt;p&gt;A posteriori, il est possible de consulter l'historique de validation de la demande d'achat en consultant les d√©tails du dossier :&lt;/p&gt;

&lt;div class=&quot;screenshot&quot;&gt;
&lt;img alt=&quot;Historique de validation&quot; src=&quot;/blogs/blog-jckermagoret/images/2014-09-01/execute-processus-032-historique-finale.png&quot;&gt;
&lt;/div&gt;


&lt;p&gt;En consultant le d√©tail de la demande d'achat, les informations de tra√ßabilit√© sont disponibles permettant de v√©rifier ce qui s'est pass√© :&lt;/p&gt;

&lt;h1&gt;Conclusion&lt;/h1&gt;

&lt;p&gt;La r√©alisation de ce tutoriel n√©cessite 1 √† 2h afin de bien suivre et comprendre les concepts et exemples rapidement pr√©sent√©s ici.&lt;/p&gt;

&lt;p&gt;Comme vous venez de le voir, l'utilisation des processus est tr√®s simple et ne n√©cessite pas de formation particuli√®re, autre que l'utilisation d'Alfresco finalement.&lt;/p&gt;

&lt;h1&gt;Ressources&lt;/h1&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://docs.cloud.bluedolmen.com/docs/blue-parapheur/fr/latest/xx01.html&quot;&gt;Manuel utilisateur de BlueParapheur&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

</content>
 </entry>
 
 <entry>
   <title>D√©mat√©rialiser (d√©finition) une demande de validation par le SG</title>
   <link href="http://jckermagoret.github.io/blogs/blog-jckermagoret/2014/09/01/Dematerialisation-1-definition"/>
   <updated>2014-09-01T00:00:00+02:00</updated>
   <id>http://jckermagoret.github.io/blogs/blog-jckermagoret/2014/09/01/Dematerialisation-1-definition</id>
   <content type="html">&lt;h1&gt;Introduction&lt;/h1&gt;

&lt;p&gt;Ce document d√©crit comment d√©velopper avec Blue Parapheur un processus de d√©mat√©rialisation de demande de validation en 2 √©tapes dans une collectivit√© territoriale. Les 2 √©tapes de validation sont r√©alis√©es par le responsable hi√©rarchique du demandeur d'abord et enfin par le secr√©taire g√©n√©ral.&lt;/p&gt;

&lt;p&gt;Initialement utilis√© dans un Conseil R√©gional, ce processus, finalement assez classique, s'applique assez naturellement √† toutes les organisations.&lt;/p&gt;

&lt;h1&gt;Processus&lt;/h1&gt;

&lt;p&gt;Le processus tel qu'il a √©t√© dessin√© par le client ou l'AMOA est le suivant :&lt;/p&gt;

&lt;p&gt;&lt;img name=&quot;Demande simple de validation en 2 √©tapes&quot; src=&quot;/blogs/blog-jckermagoret/images/2014-09-01/workflow.png&quot; width=&quot;619&quot;/&gt;&lt;/p&gt;

&lt;h1&gt;D√©finition&lt;/h1&gt;

&lt;h2&gt;M√©thodologie&lt;/h2&gt;

&lt;p&gt;Blue Parapheur propose de d√©finir un processus en plusieurs √©tapes :&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;d√©finition du processus

&lt;ul&gt;
&lt;li&gt;s√©lection des services par d√©faut&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;d√©finition des √©tapes

&lt;ul&gt;
&lt;li&gt;description de l'√©tape&lt;/li&gt;
&lt;li&gt;d√©claration des transitions entre l'√©tape courante et les autres √©tapes&lt;/li&gt;
&lt;li&gt;activation des services sp√©cifiques&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ol&gt;


&lt;p&gt;En outre, il est possible de d√©finir des services sp√©cifiques en √©crivant le code n√©cessaire.&lt;/p&gt;

&lt;p&gt;Pour chaque √©tape, il est possible d'indiquer quels sont les acteurs assign√©s ou simplement d√©finir un groupe et laisser les acteurs choisir parmir ce groupe les acteurs n√©cessaires.&lt;/p&gt;

&lt;h2&gt;Structure de Blue Parapheur&lt;/h2&gt;

&lt;p&gt;Blue Parapheur stocke les informations concernant les processus qu'il g√®re dans un site √©ponyme dans 3 r√©pertoires :&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Mod√®le : stocke les mod√®les documentaires utilis√©s dans le cadre des processus ;&lt;/li&gt;
&lt;li&gt;Paraphe : stocke l'ensemble des paraphes constituant les instances de processus en cours. Ces instances se d√©composent en instances en archives, en saisie ou valides. Vous n'avez bien s√ªr acc√®s qu'aux seuls instances auxquelles vous donnent droit vos permissions ;&lt;/li&gt;
&lt;li&gt;Processus : stocke les d√©finitions des processus selon leur type. Par d√©faut, les types cm_folder et cm_content correspondants respectivement √† cm:folder (dossier) et cm:content (fichier) d'Alfresco sont disponibles.&lt;/li&gt;
&lt;/ul&gt;


&lt;h2&gt;D√©finition du processus&lt;/h2&gt;

&lt;p&gt;Comme indiqu√© ci-dessus, pour cr√©er un processus, nous nous rendons dans un premier temps dans le site Blue Parapheur, plus particuli√®rement dans le r√©pertoire Processus/cm_folder, puisqu'on souhaite valider un r√©pertoire, et cliquons sur le bouton &quot;Cr√©er un processus&quot; :&lt;/p&gt;

&lt;div class=&quot;screenshot&quot;&gt;
&lt;img src=&quot;/blogs/blog-jckermagoret/images/2014-09-01/create-processus-1.png&quot;&gt;
&lt;/div&gt;


&lt;h3&gt;Description g√©n√©rale du processus&lt;/h3&gt;

&lt;p&gt;Le formulaire de d√©finition du processus s'affiche :&lt;/p&gt;

&lt;div class=&quot;screenshot&quot;&gt;
&lt;img src=&quot;/blogs/blog-jckermagoret/images/2014-09-01/create-processus-2.png&quot;&gt;
&lt;/div&gt;


&lt;p&gt;Les informations correspondantes sont saisies. Elles faciliteront le choix par l'utilisateur du service ad√©quat.&lt;/p&gt;

&lt;h3&gt;S√©lection des services par d√©faut&lt;/h3&gt;

&lt;div class=&quot;screenshot&quot;&gt;
&lt;img src=&quot;/blogs/blog-jckermagoret/images/2014-09-01/create-processus-3.png&quot;&gt;
&lt;/div&gt;


&lt;p&gt;Blue Parapheur propose les services par d√©faut suivants :&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Notification&lt;/li&gt;
&lt;li&gt;D√©l√©gation&lt;/li&gt;
&lt;li&gt;R√©assignation&lt;/li&gt;
&lt;li&gt;Demande d‚ÄôAvis&lt;/li&gt;
&lt;li&gt;Suggestion&lt;/li&gt;
&lt;li&gt;Injection de m√©tadonn√©es&lt;/li&gt;
&lt;li&gt;Transformation pdf/A&lt;/li&gt;
&lt;li&gt;Signature √âlectronique&lt;/li&gt;
&lt;li&gt;Contr√¥le de l√©galit√©&lt;/li&gt;
&lt;li&gt;Tra√ßabilit√©&lt;/li&gt;
&lt;li&gt;Gestion de Version et Historisation&lt;/li&gt;
&lt;li&gt;Accus√© de r√©ception&lt;/li&gt;
&lt;li&gt;Demande de modifications&lt;/li&gt;
&lt;li&gt;Archivage&lt;/li&gt;
&lt;li&gt;Horodatage&lt;/li&gt;
&lt;li&gt;Statistiques &amp;amp; Rapports&lt;/li&gt;
&lt;li&gt;√âdition en ligne&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;Pour chaque service, il suffit de cliquer sur l'ic√¥ne repr√©sentant un point d'interrogation pour obtenir la description du service correspondant.&lt;/p&gt;

&lt;p&gt;Les 4 premiers services sont activ√©s par d√©faut. Nous ne gardons finalement que les services suivants :&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Notification : les services de notification permettent de notifier par mail les acteurs assign√©s √† une t√¢che ;&lt;/li&gt;
&lt;li&gt;D√©l√©gation : les services de d√©l√©gation permettent d'indiquer un d√©l√©gataire. Ce service peut √™tre d√©sactiv√© afin d'obliger un acteur √† r√©aliser une action et √† ne pas la d√©l√©guer.&lt;/li&gt;
&lt;/ul&gt;


&lt;h3&gt;Autres onglets&lt;/h3&gt;

&lt;p&gt;Les autres onglets permettent de d√©finir des services suppl√©mentaires, de renommer les libell√©s... Ils ne sont pas utiles dans notre exemple.&lt;/p&gt;

&lt;p&gt;En cliquant sur le bouton &quot;Sauvegarder&quot;, le processus est alors sauvegard√© et on obtient la capture d'√©cran suivante.&lt;/p&gt;

&lt;div class=&quot;screenshot&quot;&gt;
&lt;img src=&quot;/blogs/blog-jckermagoret/images/2014-09-01/create-processus-4.png&quot;&gt;
&lt;/div&gt;


&lt;h2&gt;D√©finition des diff√©rentes √©tapes du processus&lt;/h2&gt;

&lt;p&gt;Le processus √©tant d√©fini, nous passons maintenant √† la d√©finition des diff√©rentes √©tapes.&lt;/p&gt;

&lt;h3&gt;Etape de lancement&lt;/h3&gt;

&lt;div class=&quot;screenshot&quot;&gt;
&lt;img src=&quot;/blogs/blog-jckermagoret/images/2014-09-01/start-processus-0.png&quot;&gt;
&lt;/div&gt;


&lt;p&gt;L'√©tape de lancement n'est pas √† d√©finir, elle est automatiquement g√©r√©e par le syst√®me qui propose l'ensemble des processus disponibles pour le type sur lequel vous lancez la validation.&lt;/p&gt;

&lt;p&gt;Cliquez sur le bouton &quot;Plus&quot; et s√©lectionnez l'action &quot;Lancer un processus&quot;. L'√©cran suivant s'affiche :&lt;/p&gt;

&lt;div class=&quot;screenshot&quot;&gt;
&lt;img src=&quot;/blogs/blog-jckermagoret/images/2014-09-01/start-processus-1.png&quot;&gt;
&lt;/div&gt;


&lt;p&gt;La liste d√©roulante permet de s√©lectionner le processus de votre choix. Vous pouvez √©galement saisir la personne devant valider votre demande.&lt;/p&gt;

&lt;p&gt;Il est bien s√ªr possible :&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;de d√©finir un bouton pour faciliter l'utilisation des processus les plus utilis√©s ;&lt;/li&gt;
&lt;li&gt;de d√©finir en fonction de votre r√¥le dans l'organisation les personnes aptes √† valider votre demande afin d'√©viter les erreurs.&lt;/li&gt;
&lt;/ul&gt;


&lt;h3&gt;Premi√®re √©tape de validation&lt;/h3&gt;

&lt;p&gt;L'√©tape de lancement √©tant r√©gl√©e, √† partir du processus pr√©c√©dent, cliquez sur le bouton &quot;Plus&quot; et s√©lectionnez l'action &quot;Afficher le processus&quot;. L'√©cran suivant, vide, s'affiche :&lt;/p&gt;

&lt;div class=&quot;screenshot&quot;&gt;
&lt;img src=&quot;/blogs/blog-jckermagoret/images/2014-09-01/create-processus-5-modeler-1.png&quot;&gt;
&lt;/div&gt;


&lt;p&gt;Cliquez sur le bouton &quot;Cr√©er une √©tape&quot; pour cr√©er la premi√®re √©tape de validation.&lt;/p&gt;

&lt;div class=&quot;screenshot&quot;&gt;
&lt;img src=&quot;/blogs/blog-jckermagoret/images/2014-09-01/create-processus-5-task-validation1-1.png&quot;&gt;
&lt;/div&gt;


&lt;p&gt;Cet √©cran permet de saisir les informations concernant la premi√®re √©tape de validation. En cliquant sur l'onglet intitul√© &quot;Etapes et intervenants&quot;, on indique qu'il s'agit du premier √©cran du processus (hormis l'√©cran de d√©marrage g√©r√© √† part par le syst√®me). On peut aussi indiquer un acteur particulier pour cet √©cran ou utiliser l'acteur indiqu√© par l'initiateur de la demande. Bien s√ªr, il est possible de modifier ce comportement par programmation pour exactement r√©pondre √† votre demande si le fonctionnement par d√©faut ne suffit pas.&lt;/p&gt;

&lt;div class=&quot;screenshot&quot;&gt;
&lt;img src=&quot;/blogs/blog-jckermagoret/images/2014-09-01/create-processus-5-task-validation1-2.png&quot;&gt;
&lt;/div&gt;


&lt;p&gt;On a alors le mod√®le de processus suivant :&lt;/p&gt;

&lt;div class=&quot;screenshot&quot;&gt;
&lt;img src=&quot;/blogs/blog-jckermagoret/images/2014-09-01/create-processus-5-task-validation1-modeler-2.png&quot;&gt;
&lt;/div&gt;


&lt;p&gt;A l'issue cet √©cran, notre premi√®re √©tape de validation est termin√©e.&lt;/p&gt;

&lt;h3&gt;Deuxi√®me √©tape de validation&lt;/h3&gt;

&lt;p&gt;En suivant la m√™me proc√©dure que pr√©c√©demment, nous d√©finissons une deuxi√®me et derni√®re √©tape de validation.&lt;/p&gt;

&lt;p&gt;Dans un premier temps, nous d√©finissons sa description :&lt;/p&gt;

&lt;div class=&quot;screenshot&quot;&gt;
&lt;img src=&quot;/blogs/blog-jckermagoret/images/2014-09-01/create-processus-5-task-validation2-1.png&quot;&gt;
&lt;/div&gt;


&lt;p&gt;Dans un deuxi√®me temps, nous d√©finissons l'√©tape de validation parente de l'√©tape en cours, en l'occurence, la premi√®re √©tape de validation nomm√©e &quot;Validation&quot; :&lt;/p&gt;

&lt;div class=&quot;screenshot&quot;&gt;
&lt;img src=&quot;/blogs/blog-jckermagoret/images/2014-09-01/create-processus-5-task-validation2-2.png&quot;&gt;
&lt;/div&gt;


&lt;p&gt;Les autres onglets permettent de modifier les param√®tres indiqu√©s lors de la d√©finition du processus. Ne souhaitant pas les modifier, nous sauvegardons directement la d√©finition de notre √©tape. L'√©cran qui appra√Æt pr√©sente alors les t√¢ches reli√©es entre elles. Vous pouvez les d√©placer afin d'avoir une repr√©sentation fonctionnelle de votre processus. En cliquant sur le bouton &quot;Sauvegarder&quot;, vous sauvez les positions de vos √©tapes √† l'√©cran.&lt;/p&gt;

&lt;div class=&quot;screenshot&quot;&gt;
&lt;img src=&quot;/blogs/blog-jckermagoret/images/2014-09-01/create-processus-5-task-validation2-modeler-3.png&quot;&gt;
&lt;/div&gt;


&lt;h3&gt;Etape de correction&lt;/h3&gt;

&lt;p&gt;En suivant la m√™me proc√©dure que pr√©c√©demment, nous d√©finissons une √©tape de correction.&lt;/p&gt;

&lt;p&gt;Dans un premier temps, nous d√©finissons sa description :&lt;/p&gt;

&lt;div class=&quot;screenshot&quot;&gt;
&lt;img src=&quot;/blogs/blog-jckermagoret/images/2014-09-01/create-processus-5-task-correction-1.png&quot;&gt;
&lt;/div&gt;


&lt;p&gt;Cette √©tape est accessible √† partir des transitions correction de chaque √©tape de validation. En outre, l'acteur initial est automatiquement assign√© √† cette √©tape de correction. En cliquant sur l'onglet &quot;Etapes et intervenants&quot;, nous pouvons indiquer les relations entre les transitions de chacun des autres √©tapes et l'√©tape en cours :&lt;/p&gt;

&lt;div class=&quot;screenshot&quot;&gt;
&lt;img src=&quot;/blogs/blog-jckermagoret/images/2014-09-01/create-processus-5-task-correction-2.png&quot;&gt;
&lt;/div&gt;


&lt;h3&gt;Premi√®re √©tape de validation&lt;/h3&gt;

&lt;p&gt;Il est n√©cessaire de revenir sur cette premi√®re √©tape de validation afin de la compl√©ter. En effet, cette √©tape est accessible apr√®s une correction, qu'elle ait √©t√© demand√©e par le premier ou le deuxi√®me approbateur. En effet, en cas de refus par le deuxi√®me approbateur, il est n√©cessaire qu'√† l'issue de la correction, le premier approbateur valide √† nouveau la demande, avant qu'elle n'arrive au deuxi√®me approbateur. Il est n√©anmoins possible de revenir directement au deuxi√®me approbateur si cela correspond √† votre besoin.&lt;/p&gt;

&lt;div class=&quot;screenshot&quot;&gt;
&lt;img src=&quot;/blogs/blog-jckermagoret/images/2014-09-01/create-processus-5-task-validation1-3-1.png&quot;&gt;
&lt;/div&gt;


&lt;p&gt;Attention √† bien activer l'option &quot;Assigne acteur initial&quot; pour que la t√¢che revienne syst√©matiquement au premier approbateur.&lt;/p&gt;

&lt;h3&gt;Etape de diffusion&lt;/h3&gt;

&lt;p&gt;En suivant la m√™me proc√©dure que pr√©c√©demment, nous d√©finissons une √©tape de correction.&lt;/p&gt;

&lt;p&gt;Dans un premier temps, nous d√©finissons sa description :&lt;/p&gt;

&lt;div class=&quot;screenshot&quot;&gt;
&lt;img src=&quot;/blogs/blog-jckermagoret/images/2014-09-01/create-processus-5-task-diffusion-1.png&quot;&gt;
&lt;/div&gt;


&lt;p&gt;Cette √©tape est accessible √† partir de la transition de validation de l'√©tape pr√©c√©dente, √† savoir la validation par le SG appel√© &quot;Validation finale&quot;. En outre, l'acteur initial est automatiquement assign√© √† cette √©tape de diffusion. En cliquant sur l'onglet &quot;Etapes et intervenants&quot;, nous pouvons indiquer ces informations :&lt;/p&gt;

&lt;div class=&quot;screenshot&quot;&gt;
&lt;img src=&quot;/blogs/blog-jckermagoret/images/2014-09-01/create-processus-5-task-diffusion-2.png&quot;&gt;
&lt;/div&gt;


&lt;h3&gt;Transitions d'abandon&lt;/h3&gt;

&lt;p&gt;Le processus actuellement mod√©lis√© est le suivant :&lt;/p&gt;

&lt;div class=&quot;screenshot&quot;&gt;
&lt;img src=&quot;/blogs/blog-jckermagoret/images/2014-09-01/create-processus-5-modeler-4.png&quot;&gt;
&lt;/div&gt;


&lt;p&gt;Lors d'une validation par les responsables ou le SG, il est possible d'abandonner le processus de validation √† tout moment. Il faut donc d√©finir cette transition.&lt;/p&gt;

&lt;p&gt;Pour cela, cliquer dans le mod√®le ci-dessus sur l'ic√¥ne avec un crayon. Elle permet d'acc√©der au d√©tail de chaque t√¢che. Cliquez ensuite sur l'onglet &quot;Etapes et intervenants&quot;. Il suffit alors de s√©lectionner l'action &quot;&quot; :&lt;/p&gt;

&lt;div class=&quot;screenshot&quot;&gt;
![D√©finition de la transition &quot;Abandonner&quot;](/blogs/blog-jckermagoret/images/2014-09-01/create-processus-5-transition-cancel-1.png)
&lt;/div&gt;


&lt;p&gt;Il suffit alors d'op√©rer de m√™me pour la t√¢che de validation finale.&lt;/p&gt;

&lt;h2&gt;Finalisation des d√©finitions des t√¢ches&lt;/h2&gt;

&lt;p&gt;Il est n√©cessaire d'indiquer pour chaque t√¢che des intervenants. Ils peuvent :&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;soit √™tre indiqu√©s en &quot;dur&quot;, dans la d√©finition de la t√¢che ;&lt;/li&gt;
&lt;li&gt;soit √™tre indiqu√©s √† l'ex√©cution par les utilisateurs de la t√¢che pr√©c√©dente. Les intervenants s√©lectionn√©s pouvant √™tre limit√©s √† un groupe ;&lt;/li&gt;
&lt;li&gt;soit √™tre indiqu√©s par r√©f√©rence aux intervenants d'une autre t√¢che d√©j√† r√©alis√©e.&lt;/li&gt;
&lt;/ul&gt;


&lt;h3&gt;Intervenants pour la t√¢che de validation&lt;/h3&gt;

&lt;p&gt;@TODO&lt;/p&gt;

&lt;h3&gt;Intervenant pour la t√¢che de diffusion&lt;/h3&gt;

&lt;p&gt;On veut le m√™me intervenant que pour la t√¢che de correction, c'est √† dire l'acteur initial. Il convient donc de l'indiquer dans la d√©finition de la t√¢che &quot;Diffusion&quot;.&lt;/p&gt;

&lt;h2&gt;Conclusion&lt;/h2&gt;

&lt;p&gt;On obtient au final le mod√®le suivant :&lt;/p&gt;

&lt;div class=&quot;screenshot&quot;&gt;
&lt;img src=&quot;/blogs/blog-jckermagoret/images/2014-09-01/create-processus-5-modeler-6.png&quot;&gt;
&lt;/div&gt;


&lt;p&gt;Pour m√©moire, les fl√®ches ont diff√©rentes couleurs dont la signification est la suivante :&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;vert : transition menant √† la t√¢che de validation suivante suite √† l'appui sur le bouton &quot;Approuver&quot;&lt;/li&gt;
&lt;li&gt;rouge : transition menant √† la t√¢che de correction suite √† l'appui sur le bouton &quot;Corriger&quot;&lt;/li&gt;
&lt;li&gt;bleu : transition 'autre' √† laquelle on peut donner la s√©mantique que l'on souhaite.&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;En outre, les t√¢ches encadr√©es en rouge proposent une transition permettant d'abandonner le processus.&lt;/p&gt;

&lt;p&gt;Blue Parapheur est un outil tr√®s simple, permettant de d√©finir 95% des processus de validation.&lt;/p&gt;

&lt;h1&gt;Ressources&lt;/h1&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://docs.cloud.bluedolmen.com/docs/blue-parapheur/fr/latest/xx01.html&quot;&gt;Manuel utilisateur de BlueParapheur&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

</content>
 </entry>
 
 <entry>
   <title>Tester le code am√©liore sa qualit√©</title>
   <link href="http://jckermagoret.github.io/blogs/blog-jckermagoret/2014/08/27/Tester-le-code-ameliore-la-qualite"/>
   <updated>2014-08-27T00:00:00+02:00</updated>
   <id>http://jckermagoret.github.io/blogs/blog-jckermagoret/2014/08/27/Tester-le-code-ameliore-la-qualite</id>
   <content type="html">&lt;h1&gt;Introduction&lt;/h1&gt;

&lt;p&gt;Dans le cadre du d√©veloppement d'une application, quelle qu'elle soit, les tests sont indispensables afin de garantir un haut niveau de qualit√©. Il en existe plusieurs types :&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Unitaires,&lt;/li&gt;
&lt;li&gt;Int√©gration,&lt;/li&gt;
&lt;li&gt;Fonctionnels,&lt;/li&gt;
&lt;li&gt;Qualification...&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;Ces tests constituent une part non n√©gligeable du d√©veloppement. Il est possible d'automatiser la plupart des tests, ce qui permet au final un gain de temps substantiel, et surtout une plus grande fiabilit√©.&lt;/p&gt;

&lt;h1&gt;Tests&lt;/h1&gt;

&lt;h2&gt;Selenium&lt;/h2&gt;

&lt;p&gt;Selenium est un outil d'automatisation de tests fonctionnels d'applications Web. Il permet de programmer les interactions de l'utilisateur avec l'application web. Celles-ci peuvent ensuite √™tre param√©tr√©es afin d'√™tre rejou√©es pour simuler un utilisateur, plusieurs utilisateurs, avec des navigateurs diff√©rents, des syst√®mes d'exploitation diff√©rents. On peut donc aussi simuler des charges plus ou moins importantes.&lt;/p&gt;

&lt;p&gt;L'approche par les tests permet ainsi de produire au final un code plus robuste.&lt;/p&gt;

&lt;h2&gt;Alfresco Share&lt;/h2&gt;

&lt;p&gt;BlueXML a d√©velopp√© pour Alfresco Share de tels tests. Ils permettent actuellement d'effectuer automatiquement 130 tests de non r√©gression fonctionnelle sur Alfresco Share Enterprise 4.0.2.9 et permettent d'√©conomiser 2 heures de travail au niveau de BlueXML comme du client final, car sa recette est √©galement facilit√©e.&lt;/p&gt;

&lt;p&gt;Sachant que les tests sont rejou√©s de nombreuses fois, ce sont plusieurs jours qui sont √©conomis√©s pour chaque √©quipe, c√¥t√© BlueXML comme c√¥t√© client.&lt;/p&gt;

&lt;div class=&quot;screenshot&quot;&gt;
&lt;img src=&quot;/blogs/blog-jckermagoret/images/2014-08-27/selenium-alltests.png&quot;&gt;
&lt;/div&gt;


&lt;p&gt;Dans le cadre d'Alfresco Share, ces tests sont regroup√©s au sein de 11 modules afin de faciliter des tests partiels lorsque cela est n√©cessaire. La figure ci-dessous illustre les tests r√©alis√©s dans le cadre de l'√©cran principal des utilisateurs, √† savoir le tableau de bord¬†:&lt;/p&gt;

&lt;div class=&quot;screenshot&quot;&gt;
&lt;img src=&quot;/blogs/blog-jckermagoret/images/2014-08-27/selenium-testWorkspaceActionTest.png&quot;&gt;
&lt;/div&gt;


&lt;p&gt;M√™me si l'on peut parfois avoir l'impression que les tests ne sont pas utiles, il s'av√®re d'une efficacit√© redoutable pour d√©tecter les probl√®mes imm√©diatement lorsqu'ils sont r√©alis√©s automatiquement dans une chaine d'int√©gration continue. BlueXML met syst√©matiquement en place pour ses projets des environnements d'int√©gration continue permettant de lancer automatiquement chaque nuit les tests d√©velopp√©s avec Selenium.&lt;/p&gt;

&lt;p&gt;Chaque matin, les d√©veloppeurs ont dans leur bo√Æte mail les r√©sultats des tests et peuvent imm√©diatement diagnostiquer le probl√®me, g√©n√©ralement li√© √† un conflit sur des fichiers modifi√©s par des d√©veloppeurs diff√©rents. Le fait de corriger le probl√®me imm√©diatement permet de limiter le co√ªt des bugs √† leur strict minimum. En effet, le co√ªt des bugs est li√© exponentiellement au temps n√©cessaire √† leur d√©couverte¬†: plus un bug est d√©couvert tard, plus le co√ªt de sa r√©solution sera √©lev√©. De quelques minutes s'il est trait√© imm√©diatement, il peut facilement n√©cessiter plusieurs heures, voire jours, pour une r√©solution tardive (car le d√©veloppeur est sur un autre projet, car il n'est plus l√†, car il ne se rappelle plus de quelle modification il s'agit...).&lt;/p&gt;

&lt;h2&gt;Gains&lt;/h2&gt;

&lt;p&gt;Les gains li√©s aux tests sont visibles √† chaque √©tape du projet¬†:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Maintenance aux Conditions Op√©rationnelles¬†: en cas de crash, suite √† la restauration du syst√®me, les tests fonctionnels permettent de valider automatiquement que les fonctions principales sont disponibles et op√©rationnelles,&lt;/li&gt;
&lt;li&gt;D√©veloppement¬†: les d√©veloppeurs ont dans Eclipse un environnement de test permettant de v√©rifier que leur travail est correct et s'int√®gre sans probl√®me avec le travail de leurs coll√®gue,&lt;/li&gt;
&lt;li&gt;Livraison¬†: lors de la livraison, les tests sont jou√©s et une vid√©o fournie, ainsi que des screenshots, prouvant que la livraison est correcte,&lt;/li&gt;
&lt;li&gt;Migration¬†: jouer les tests permet de mettre en √©vidence les points bloquants lors du passage √† une nouvelle version. Cette √©tape n√©cessite de jouer souvent les tests et assurent une √©conomie de temps int√©ressant qu'il est ainsi possible de passer ailleurs.&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;Tous ces tests permettent d'am√©liorer la qualit√© du code, sa r√©utilisabilit√© et contribuent √† optimiser pour chaque acteur son ROI, garant d'une relation p√©renne de bonne qualit√©.&lt;/p&gt;

&lt;h1&gt;Phases&lt;/h1&gt;

&lt;h2&gt;D√©veloppement&lt;/h2&gt;

&lt;p&gt;L'environnement de d√©veloppement Eclipse permet au d√©veloppeur de jouer ses tests autant de fois qu'il le souhaite dans la journ√©e. L'objectif est d'avoir une totale confiance dans ces tests afin qu'ils soient totalement int√©gr√©s dans le processus de d√©veloppement.&lt;/p&gt;

&lt;div class=&quot;screenshot&quot;&gt;
&lt;img src=&quot;/blogs/blog-jckermagoret/images/2014-08-27/selenium-testok.png&quot;&gt;
&lt;/div&gt;


&lt;p&gt;En cas d'√©chec, les tests apparaissent en rouge et les √©l√©ments en cause sont d√©taill√©s¬†:&lt;/p&gt;

&lt;div class=&quot;screenshot&quot;&gt;
&lt;img src=&quot;/blogs/blog-jckermagoret/images/2014-08-27/selenium-testnok.png&quot;&gt;
&lt;/div&gt;


&lt;h2&gt;Livraison&lt;/h2&gt;

&lt;p&gt;Les tests sont jou√©s tout le temps, plusieurs fois dans la journ√©e par les d√©veloppeurs, chaque nuit par le syst√®me d'int√©gration continue comme Hudson ou Jenkins. Les r√©sultats sont alors disponibles au petit matin sur un tableau de bord g√©n√©ral.&lt;/p&gt;

&lt;div class=&quot;screenshot&quot;&gt;
&lt;img src=&quot;/blogs/blog-jckermagoret/images/2014-08-27/unitth-2.png&quot;&gt;
&lt;/div&gt;


&lt;p&gt;Une vid√©o peut aussi √™tre g√©n√©r√©e automatiquement lors de la r√©alisation du test. Celle-ci permet de se rendre compte, de visu et tr√®s rapidement, que tout est correct ou non. Des captures d'√©cran √† des moments 'sensibles' peuvent aussi √™tre g√©n√©r√©es. Ces √©l√©ments permettent de v√©rifier que tout est correct ou non et que le travail r√©alis√© la veille est valide.&lt;/p&gt;

&lt;h2&gt;Migration&lt;/h2&gt;

&lt;p&gt;Les tests repr√©sentent un co√ªt non n√©gligeable mais sont un v√©ritable investissement qui garantit la qualit√© de votre solution.&lt;/p&gt;

&lt;p&gt;Utiles lors de la phase de d√©veloppement et pour chaque livraison, les tests assistent aussi les d√©veloppeurs en montrant les points bloquants sur le chemin fonctionnel critique&lt;/p&gt;

&lt;h1&gt;Conclusion&lt;/h1&gt;

&lt;p&gt;BlueXML dans le cadre de sa d√©marche qualit√© programme des actions sur l'interface, et √† v√©rifier les r√©ponses. Les actions √† r√©aliser peuvent √™tre export√©es depuis Selenium IDE.&lt;/p&gt;

&lt;p&gt;Les tests doivent √™tre maintenus car les √©l√©ments d'interface peuvent √™tre modifi√©s lors de d√©veloppement d'une nouvelle fonctionnalit√© ou du passage √† une autre version d'Alfresco lors d'une migration par exemple.&lt;/p&gt;

&lt;p&gt;Les tests sont incontournables. En ne les faisant pas, vous n'aurez pas une solution de qualit√© professionnelle mais un jouet qui vous co√ªtera au final tr√®s cher.&lt;/p&gt;

&lt;p&gt;Ils garantissent la qualit√© de votre solution et la satisfaction de vos utilisateurs.&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>Local Read The Docs Installation</title>
   <link href="http://jckermagoret.github.io/blogs/blog-jckermagoret/2014/05/14/Read-the-docs"/>
   <updated>2014-05-14T00:00:00+02:00</updated>
   <id>http://jckermagoret.github.io/blogs/blog-jckermagoret/2014/05/14/Read-the-docs</id>
   <content type="html">&lt;h1&gt;Introduction&lt;/h1&gt;

&lt;p&gt;I want to migrate RTD from sqlite to postgres.&lt;/p&gt;

&lt;p&gt;To do so, I first need to find the settings file. Unfortunately, I'm a Django newbie :-)&lt;/p&gt;

&lt;h1&gt;Settings&lt;/h1&gt;

&lt;p&gt;To start, read Chapter 12 of the Django Book. It's all about deployment.&lt;/p&gt;

&lt;p&gt;In checkouts/readthedocs, have a look at manage.py :&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;#!/usr/bin/env python
import os
import sys

if __name__ == &quot;__main__&quot;:
    os.environ.setdefault(&quot;DJANGO_SETTINGS_MODULE&quot;, &quot;settings.sqlite&quot;)
    sys.path.append('readthedocs')

    from django.core.management import execute_from_command_line

    execute_from_command_line(sys.argv)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;As you can see:
* DJANGO_SETTINGS_MODULE=settings.sqlite&lt;/p&gt;

&lt;p&gt;which means settings are filled from the settings/sqlite.py file.&lt;/p&gt;

&lt;p&gt;To migrate in production, we just need to replace it with &quot;settings&quot;. The settings/&lt;strong&gt;init&lt;/strong&gt;.py file will then be used instead.&lt;/p&gt;

&lt;h1&gt;Migrations&lt;/h1&gt;

&lt;p&gt;Before using production settings, dump the sqlite database:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;python manage.py dumpdata --indent=4 &gt; sqlite.json&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;See [Django migration tips] before continuing...&lt;/p&gt;

&lt;p&gt;Set production settings, then:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;python manage.py syncdb&lt;/li&gt;
&lt;/ul&gt;


&lt;h1&gt;Problems&lt;/h1&gt;

&lt;h2&gt;Module settings not found&lt;/h2&gt;

&lt;p&gt;sys.path.insert(0, '/opt/src/rtd/checkouts/readthedocs.org/readthedocs')&lt;/p&gt;

&lt;h2&gt;Module djangodocs not found&lt;/h2&gt;

&lt;p&gt;It is in fact stored into read-the-docs example, beside rst files&lt;/p&gt;

&lt;h2&gt;Can't sign&lt;/h2&gt;

&lt;p&gt;http://stackoverflow.com/questions/4808105/cant-sign-in-to-django-admin&lt;/p&gt;

&lt;p&gt;Finally, because it is required to set:
* SESSION_COOKIE_DOMAIN = None&lt;/p&gt;

&lt;h2&gt;DEBUG = False&lt;/h2&gt;

&lt;p&gt;When DEBUG = True, everything is OK but messages are too informative for usual people.&lt;/p&gt;

&lt;h1&gt;Test&lt;/h1&gt;

&lt;p&gt;cd /opt/src/rtd
source bin/activate
cd checkouts/readthedocs.org/user_builds&lt;/p&gt;

&lt;p&gt;sphinx-build  -E  -b readthedocs -D language=en_build/html /opt/src/rtd/checkouts/readthedocs.org/user_builds/side-for-alfresco/checkouts/latest/side-for-alfresco/src/rst side-for-alfresco/rtd-builds/latest&lt;/p&gt;

&lt;h1&gt;Ressources&lt;/h1&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;http://stackoverflow.com/questions/5739880/django-update-database-schema-without-losing-data&quot;&gt;Django migration tips&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;http://stackoverflow.com/questions/11476210/getting-site-matching-query-does-not-exist-error-after-creating-django-admin&lt;/li&gt;
&lt;/ul&gt;

</content>
 </entry>
 
 <entry>
   <title>RO System</title>
   <link href="http://jckermagoret.github.io/blogs/blog-jckermagoret/2014/04/25/RO-system"/>
   <updated>2014-04-25T00:00:00+02:00</updated>
   <id>http://jckermagoret.github.io/blogs/blog-jckermagoret/2014/04/25/RO-system</id>
   <content type="html">&lt;h1&gt;Introduction&lt;/h1&gt;

&lt;h2&gt;/etc&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;adjtime&lt;/li&gt;
&lt;/ul&gt;


&lt;h2&gt;/var&lt;/h2&gt;

&lt;h2&gt;/var/local&lt;/h2&gt;

&lt;h1&gt;Ressources&lt;/h1&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://wiki.debian.org/ReadonlyRoot&quot;&gt;RO Root on Debian&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

</content>
 </entry>
 
 <entry>
   <title>Orbit Open Ad Server Installation</title>
   <link href="http://jckermagoret.github.io/blogs/blog-jckermagoret/2014/04/23/orbit-open-ad-server"/>
   <updated>2014-04-23T00:00:00+02:00</updated>
   <id>http://jckermagoret.github.io/blogs/blog-jckermagoret/2014/04/23/orbit-open-ad-server</id>
   <content type="html">&lt;h1&gt;Introduction&lt;/h1&gt;

&lt;p&gt;This software may be downloaded on [OrbitScripts].&lt;/p&gt;

&lt;h1&gt;Installation&lt;/h1&gt;

&lt;ul&gt;
&lt;li&gt;Read readme.txt in the main installation directory.&lt;/li&gt;
&lt;li&gt;Install PDO sqlite, SimpleXML...&lt;/li&gt;
&lt;li&gt;If you use a recent php installation (for example php 5.3 or 5.4), you may encounter the following warnings:

&lt;ul&gt;
&lt;li&gt;disable disable_functions&lt;/li&gt;
&lt;li&gt;mysql_escape_string =&gt; must be replace by mysql_real_escape_string&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Enable mod_rewrite&lt;/li&gt;
&lt;li&gt;Allow .htaccess&lt;/li&gt;
&lt;/ul&gt;


&lt;h2&gt;disable disable_functions&lt;/h2&gt;

&lt;p&gt;In /etc/php5/apache2/php.ini, find disable_functions and set it to nothing:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;disable_functions =
&lt;/code&gt;&lt;/pre&gt;

&lt;h2&gt;mysql_escape_string&lt;/h2&gt;

&lt;p&gt;Just replace mysql_escape_string with mysql_real_escape_string:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;replace &quot;mysql_escape_string&quot; &quot;mysql_real_escape_string&quot; -- system/database/drivers/mysqli/mysqli_driver.php
replace &quot;mysql_escape_string&quot; &quot;mysql_real_escape_string&quot; -- system/database/drivers/zend/zend_driver.php
replace &quot;mysql_escape_string&quot; &quot;mysql_real_escape_string&quot; -- system/database/drivers/mysql/mysql_driver.php
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Other warnings may be ignored&lt;/p&gt;

&lt;h2&gt;enable mod_rewrite&lt;/h2&gt;

&lt;p&gt;a2enmod rewrite&lt;/p&gt;

&lt;h2&gt;enable .htaccess&lt;/h2&gt;

&lt;p&gt;If you have an error about file that doesn't exist when trying to access http://.../openadserver/, it simply means the .htaccess doesn't work. To fix this problem, in /etc/apache2/sites-enabled/000-default, just add AllowOverride All to the main Directory entry:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;lt;Directory /var/www/&amp;gt;
    Options Indexes FollowSymLinks MultiViews
    AllowOverride All
    Order allow,deny
    allow from all
&amp;lt;/Directory&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;h1&gt;Conclusion&lt;/h1&gt;

&lt;p&gt;just reload apache2 configuration with:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;service apache2 reload
&lt;/code&gt;&lt;/pre&gt;

&lt;h1&gt;Ressources&lt;/h1&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;http://orbitscripts.com/&quot;&gt;OrbitScripts&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

</content>
 </entry>
 
 <entry>
   <title>Read The Docs Installation</title>
   <link href="http://jckermagoret.github.io/blogs/blog-jckermagoret/2014/04/03/read-the-docs"/>
   <updated>2014-04-03T00:00:00+02:00</updated>
   <id>http://jckermagoret.github.io/blogs/blog-jckermagoret/2014/04/03/read-the-docs</id>
   <content type="html">&lt;h1&gt;Introduction&lt;/h1&gt;

&lt;h1&gt;Ressources&lt;/h1&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;&quot;&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

</content>
 </entry>
 
 <entry>
   <title>Gitorious Installation</title>
   <link href="http://jckermagoret.github.io/blogs/blog-jckermagoret/2014/04/03/gitorious"/>
   <updated>2014-04-03T00:00:00+02:00</updated>
   <id>http://jckermagoret.github.io/blogs/blog-jckermagoret/2014/04/03/gitorious</id>
   <content type="html">&lt;h1&gt;Introduction&lt;/h1&gt;

&lt;p&gt;Exploitation [exploitation]
Problem of resources not [precompiled]
Taking over ownership of Projects and Repositories as Administrator [ownership]
Memory Allocation Error [ENOMEM]&lt;/p&gt;

&lt;h2&gt;Ownership&lt;/h2&gt;

&lt;p&gt;bin/transfer-ownership&lt;/p&gt;

&lt;h1&gt;Ressources&lt;/h1&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;http://getgitorious.com/install-gitorious&quot;&gt;exploitation&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://groups.google.com/forum/#!topic/gitorious/2Uwlnq5MKYw&quot;&gt;precompiled&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;[installation] http://famousphil.com/blog/2011/06/installing-gitorious-on-centos-5-6-x64/&lt;/li&gt;
&lt;li&gt;[ownership] https://groups.google.com/forum/#!topic/gitorious/gxlhm1qQ1fE&lt;/li&gt;
&lt;li&gt;[ENOMEM] https://groups.google.com/forum/#!topic/capistrano/WDAPMl6A1Z4&lt;/li&gt;
&lt;/ul&gt;

</content>
 </entry>
 
 <entry>
   <title>Suspend Processes for Quick Restarts</title>
   <link href="http://jckermagoret.github.io/blogs/blog-jckermagoret/2014/02/03/suspend-system"/>
   <updated>2014-02-03T00:00:00+01:00</updated>
   <id>http://jckermagoret.github.io/blogs/blog-jckermagoret/2014/02/03/suspend-system</id>
   <content type="html">&lt;h1&gt;Introduction&lt;/h1&gt;

&lt;p&gt;In a multi-host environment, I want to suspend system execution so I can save resources while not used and restart quickly as soon as user comes back.&lt;/p&gt;

&lt;p&gt;Before describing the problem, here is a short comparison beetween OepnVZ and KVM:
* http://wiki.buyvm.net/doku.php/openvz_vs_kvm&lt;/p&gt;

&lt;h1&gt;The problem&lt;/h1&gt;

&lt;p&gt;In such an environment, saving resources is really very important. It's the only way to serve 100s of organizations with minimal hardware and lower down the hosting price.&lt;/p&gt;

&lt;p&gt;There are various ways to do it:
* at the user space level: while running, just suspend process execution
* at the system level: just make a snapshot&lt;/p&gt;

&lt;p&gt;We, of course, start from the hypothesis that suspending the system is cheaper than stopping/starting it, which must be verified.&lt;/p&gt;

&lt;h1&gt;The solutions&lt;/h1&gt;

&lt;h2&gt;User level&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;http://git.kernel.org/cgit/linux/kernel/git/torvalds/linux.git/tree/Documentation/power/swsusp.txt?id=HEAD&quot;&gt;swsusp&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://git.kernel.org/cgit/linux/kernel/git/torvalds/linux.git/tree/Documentation/power/userland-swsusp.txt?id=HEAD&quot;&gt;swsusp/user land&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;


&lt;h2&gt;System level&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://openvz.org/Ploop&quot;&gt;OpenVZ/Ploop&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://openvz.org/Ploop/Getting_started&quot;&gt;OpenVZ/Ploop Getting Started&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://openvz.livejournal.com/44508.html&quot;&gt;OpenVZ/Ploop snapshots and backups&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://openvz.org/Ploop/backup&quot;&gt;OpenVZ/Ploop backup&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://forum.proxmox.com/threads/13079-Snapshots-with-OpenVz&quot;&gt;OpenVZ/Snapshots with OpenVz&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://forum.openvz.org/index.php?t=msg&amp;amp;goto=49923&amp;amp;&quot;&gt;OpenVZ/Ploop migration script&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://pve.proxmox.com/wiki/Backup_and_Restore&quot;&gt;Backup_and_Restore&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;


&lt;h1&gt;Ressources&lt;/h1&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;http://git.kernel.org/cgit/linux/kernel/git/torvalds/linux.git/tree/Documentation/power/swsusp.txt?id=HEAD&quot;&gt;swsusp&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://git.kernel.org/cgit/linux/kernel/git/torvalds/linux.git/tree/Documentation/power/userland-swsusp.txt?id=HEAD&quot;&gt;swsusp/user land&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://forum.proxmox.com/threads/13079-Snapshots-with-OpenVz&quot;&gt;Snapshots with OpenVz&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://pve.proxmox.com/wiki/Backup_and_Restore&quot;&gt;Backup_and_Restore&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

</content>
 </entry>
 
 <entry>
   <title>High Availability (HA) Alfresco</title>
   <link href="http://jckermagoret.github.io/blogs/blog-jckermagoret/2014/02/03/HA-Alfresco"/>
   <updated>2014-02-03T00:00:00+01:00</updated>
   <id>http://jckermagoret.github.io/blogs/blog-jckermagoret/2014/02/03/HA-Alfresco</id>
   <content type="html">&lt;h1&gt;Introduction&lt;/h1&gt;

&lt;h1&gt;Ressources&lt;/h1&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;http://blog.abstractive.ca/2012/07/implementing-a-complete-high-availability-alfresco-solution-using-open-source-technologies/&quot;&gt;HA&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

</content>
 </entry>
 
 <entry>
   <title>Alfresco performances</title>
   <link href="http://jckermagoret.github.io/blogs/blog-jckermagoret/2014/02/03/Alfresco+performances"/>
   <updated>2014-02-03T00:00:00+01:00</updated>
   <id>http://jckermagoret.github.io/blogs/blog-jckermagoret/2014/02/03/Alfresco performances</id>
   <content type="html">&lt;h1&gt;Introduction&lt;/h1&gt;

&lt;p&gt;Starting Alfresco is slow, which prevents stopping/restarting it at will.&lt;/p&gt;

&lt;h1&gt;Ressources&lt;/h1&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;http://stackoverflow.com/questions/2333089/alfresco-community-on-tomcat-starts-very-slow&quot;&gt;Tomcat starts very slow&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://psi-probe.googlecode.com/&quot;&gt;PSI Probe&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

</content>
 </entry>
 
 <entry>
   <title>HTML5 Remote Client</title>
   <link href="http://jckermagoret.github.io/blogs/blog-jckermagoret/2014/02/02/html5-remote-client"/>
   <updated>2014-02-02T00:00:00+01:00</updated>
   <id>http://jckermagoret.github.io/blogs/blog-jckermagoret/2014/02/02/html5-remote-client</id>
   <content type="html">&lt;h1&gt;Introduction&lt;/h1&gt;

&lt;p&gt;I want to access applications through a browser which basically means through a HTML5 and javascript client.&lt;/p&gt;

&lt;h1&gt;The solution&lt;/h1&gt;

&lt;p&gt;There are 2 types of solutions:
* remote client applications access
* remote server access&lt;/p&gt;

&lt;h2&gt;Remote client applications access&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://bitbucket.org/MarkusKramer/fernapp/wiki/setup&quot;&gt;FernApp&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;


&lt;h2&gt;Remote server access&lt;/h2&gt;

&lt;p&gt;There are various such implementations around:
* &lt;a href=&quot;https://github.com/kanaka/noVNC&quot;&gt;noVNC&lt;/a&gt;
* &lt;a href=&quot;http://guac-dev.org/&quot;&gt;Guacamole&lt;/a&gt;
* &lt;a href=&quot;http://liftoffsoftware.com/Products/GateOne&quot;&gt;GateOne&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Please note [GateOne] is neither free, nor open source, in constrast with [noVNC] and [Guacamole].&lt;/p&gt;

&lt;h1&gt;noVNC&lt;/h1&gt;

&lt;p&gt;Just type your username + enter + yourpasswd + enter and that's it!&lt;/p&gt;

&lt;h1&gt;Ressources&lt;/h1&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;http://liftoffsoftware.com/Products/GateOne&quot;&gt;GateOne&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;http://bluexml.orbitopenadserver.com/admin/color_palettes&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>Ad Server</title>
   <link href="http://jckermagoret.github.io/blogs/blog-jckermagoret/2014/02/02/ad-server"/>
   <updated>2014-02-02T00:00:00+01:00</updated>
   <id>http://jckermagoret.github.io/blogs/blog-jckermagoret/2014/02/02/ad-server</id>
   <content type="html">&lt;h1&gt;Introduction&lt;/h1&gt;

&lt;p&gt;I want to manage advertising. Are there any open solutions, or just proprietary ones?&lt;/p&gt;

&lt;h1&gt;The solution&lt;/h1&gt;

&lt;p&gt;There is only one open source version, based on dual licensing:
* [OrbitOpenAdServer]&lt;/p&gt;

&lt;h1&gt;Ressources&lt;/h1&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;http://bluexml.orbitopenadserver.com/admin/&quot;&gt;OrbitOpenAdServer&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

</content>
 </entry>
 
 <entry>
   <title>Ascii Art</title>
   <link href="http://jckermagoret.github.io/blogs/blog-jckermagoret/2014/01/28/Ascii-art"/>
   <updated>2014-01-28T00:00:00+01:00</updated>
   <id>http://jckermagoret.github.io/blogs/blog-jckermagoret/2014/01/28/Ascii-art</id>
   <content type="html">&lt;h1&gt;Introduction&lt;/h1&gt;

&lt;p&gt;I want to create ascii art table from writer or spreadsheet table. I only found one really usable solution called [Senseful Solutions].&lt;/p&gt;

&lt;p&gt;Another great solution, to draw ascii diagrams, is [Ascii flow].&lt;/p&gt;

&lt;h1&gt;The problem&lt;/h1&gt;

&lt;p&gt;Writing ascii table is very boring.&lt;/p&gt;

&lt;p&gt;Senseful Solutions to the rescue.&lt;/p&gt;

&lt;h1&gt;The solution&lt;/h1&gt;

&lt;p&gt;Senseful Solutions is a web service. Just copy'n paste your table content from writer or spreadsheet to the input box and format it.&lt;/p&gt;

&lt;p&gt;Sometimes, the copy'n paste from writer to Senseful is bad. In this case, copy'n paste to a spreadsheet, then copy'n pas from the spreadsheet to the Senseful web service.&lt;/p&gt;

&lt;p&gt;In a matter of milliseconds, you have an awesome ascii table.&lt;/p&gt;

&lt;h1&gt;Ressources&lt;/h1&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;http://www.sensefulsolutions.com/2010/10/format-text-as-table.html&quot;&gt;Senseful Solutions&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/lewish/asciiflow&quot;&gt;Ascii flow&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

</content>
 </entry>
 
 <entry>
   <title>Unionfs-fuse</title>
   <link href="http://jckermagoret.github.io/blogs/blog-jckermagoret/2013/12/16/Unionfs-fuse"/>
   <updated>2013-12-16T00:00:00+01:00</updated>
   <id>http://jckermagoret.github.io/blogs/blog-jckermagoret/2013/12/16/Unionfs-fuse</id>
   <content type="html">&lt;h1&gt;Introduction&lt;/h1&gt;

&lt;p&gt;I want to store content in various directories and have a unified view of them. Unionfs has been developed to achieve this need.&lt;/p&gt;

&lt;h1&gt;The problem&lt;/h1&gt;

&lt;p&gt;I work on ECM applications based on Alfresco. Custom developments are based on libs stored in WEB-INF. They are mixed with Alfresco ones which make difficult to know who did what. I can prefix them with a specific name so I will recognize them, but it is not a very convenient solution.&lt;/p&gt;

&lt;p&gt;Unionfs-fuse to the rescue.&lt;/p&gt;

&lt;h1&gt;The solution&lt;/h1&gt;

&lt;p&gt;Unionfs-fuse concatenates content from various directories into one. For example, imagine I have the following directories :&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;lib-base : contains the alfresco libraries provided by the installation&lt;/li&gt;
&lt;li&gt;lib-ext : contains the alfresco libraries provided by my custom development&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;Unionfs-fuse allows to have directory (lib for example) which will be the union of the other ones. Just type the following command:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;unionfs-fuse lib-base=RO:lib-ext=RO lib
&lt;/code&gt;&lt;/pre&gt;

&lt;h2&gt;Download&lt;/h2&gt;

&lt;p&gt;Get it on github with the following command:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;git clone https://github.com/jonnyyu/unionfs-fuse‚Äé
&lt;/code&gt;&lt;/pre&gt;

&lt;h2&gt;Compilation&lt;/h2&gt;

&lt;p&gt;Go into the directory and type:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;make
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;You may have 2 errors which are very easy to fix:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;AT_SYMLINK_NOFOLLOW&lt;/li&gt;
&lt;li&gt;malloc.h&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;On OpenVZ, create the following:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;vzctl set CTID --devnodes fuse:rw --save&lt;/li&gt;
&lt;/ul&gt;


&lt;h3&gt;Bug AT_SYMLINK_NOFOLLOW&lt;/h3&gt;

&lt;p&gt;This bug requires you apply this [patch][Bug AT_SYMLINK_NOFOLLOW]. I always had difficulties with patch, so I prefer to apply it manually. Fortunately, the file is pretty simple.&lt;/p&gt;

&lt;h3&gt;Bug malloc.h&lt;/h3&gt;

&lt;p&gt;As indicated [here][Bug malloc.h]:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;Actually, you shouldn't need malloc.h at all, it's obsolete; including stdlib.h should take care of what malloc.h used to handle. Basically, just remove it, or #if it out
&lt;/code&gt;&lt;/pre&gt;

&lt;h3&gt;Finalization&lt;/h3&gt;

&lt;p&gt;Just type make again and that's it!&lt;/p&gt;

&lt;h1&gt;Ressources&lt;/h1&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/jonnyyu/unionfs-fuse%E2%80%8E&quot;&gt;unionfs-fuse&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://blog.breadncup.com/files/fuse/0001-Patches-for-Mac-OS-X-Mountain-Lion-for-unionfs-fuse-0.26.patch&quot;&gt;Bug AT_SYMLINK_NOFOLLOW&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://hintsforums.macworld.com/showthread.php?t=2023&quot;&gt;Bug malloc.h&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

</content>
 </entry>
 
 <entry>
   <title>Restore window bug with Open/Libre Office</title>
   <link href="http://jckermagoret.github.io/blogs/blog-jckermagoret/2013/12/13/Restore-windows-bug-with-OOo-LO"/>
   <updated>2013-12-13T00:00:00+01:00</updated>
   <id>http://jckermagoret.github.io/blogs/blog-jckermagoret/2013/12/13/Restore-windows-bug-with-OOo-LO</id>
   <content type="html">&lt;h1&gt;Introduction&lt;/h1&gt;

&lt;p&gt;&quot;The last time you opened LibreOffice, it unexpectedly quit while reopening windows. Do you want to try to reopen its windows again?&lt;/p&gt;

&lt;p&gt;If you choose not to reopen windows, you may have to open and position the windows yourself&lt;/p&gt;

&lt;p&gt;This box won't go away by repeatably clicking either buttons, nor it have a way to skip this (though I can create/open documents). Even under File menu, the item &quot;Quit LibreOffice&quot; is always dimmed - the only way to get rid of this is to open terminal and do a 'kill -9'&lt;/p&gt;

&lt;h1&gt;Solution&lt;/h1&gt;

&lt;p&gt;http://ask.libreoffice.org/en/question/6752/libreoffice-startup-always-asking-reopen-windows/&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Open Finder&lt;/li&gt;
&lt;li&gt;Option-click the Go menu&lt;/li&gt;
&lt;li&gt;Choose Library from the menu to open the folder in the Finder or enter (~/Library)&lt;/li&gt;
&lt;li&gt;Click on the folder Saved Application State&lt;/li&gt;
&lt;li&gt;Delete the file &quot;org.libreoffice.script.savedState&quot;&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;That's it !-)&lt;/p&gt;

&lt;h1&gt;Ressources&lt;/h1&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;http://ask.libreoffice.org/en/question/6752/libreoffice-startup-always-asking-reopen-windows/&quot;&gt;Open/Reopen bug&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

</content>
 </entry>
 
 <entry>
   <title>Importer des donn√©es en masse dans Alfresco √† l'aide de bulk import</title>
   <link href="http://jckermagoret.github.io/blogs/blog-jckermagoret/2013/12/12/Alfresco_share_modules_dynamic_reloading"/>
   <updated>2013-12-12T00:00:00+01:00</updated>
   <id>http://jckermagoret.github.io/blogs/blog-jckermagoret/2013/12/12/Alfresco_share_modules_dynamic_reloading</id>
   <content type="html">&lt;h1&gt;Introduction&lt;/h1&gt;

&lt;h1&gt;Solution&lt;/h1&gt;

&lt;h1&gt;Impl√©mentation&lt;/h1&gt;

&lt;h1&gt;Conclusion&lt;/h1&gt;

&lt;h1&gt;Ressources&lt;/h1&gt;

&lt;p&gt;BluePrint:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;http://docs.spring.io/osgi/docs/2.0.0.M1/reference/html/blueprint.html&quot;&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;JRebel :&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://wiki.alfresco.com/wiki/Using_JRebel_for_Speedy_Alfresco_Development&quot;&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://www.zaizi.com/blog/boost-your-alfresco-development-jrebel&quot;&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://tpeelen.wordpress.com/2012/06/10/alfresco-development-using-jrebel-less-restarting-more-focus/&quot;&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://manuals.zeroturnaround.com/jrebel/standalone/config.html&quot;&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://zeroturnaround.com/software/jrebel/download/installing-jrebel-plugin-for-eclipse/&quot;&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://cherryshoe.blogspot.fr/2012/11/save-time-integrating-jrebel.html&quot;&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;Alternatives:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;http://www.contentreich.de/java-class-reloading-pain-a-fresh-open-source-jrebel-alternative&quot;&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

</content>
 </entry>
 
 <entry>
   <title>Importer des donn√©es en masse dans Alfresco √† l'aide de bulk import</title>
   <link href="http://jckermagoret.github.io/blogs/blog-jckermagoret/2013/12/03/Import-data-into-Alfresco-with-bulk-import"/>
   <updated>2013-12-03T00:00:00+01:00</updated>
   <id>http://jckermagoret.github.io/blogs/blog-jckermagoret/2013/12/03/Import-data-into-Alfresco-with-bulk-import</id>
   <content type="html">&lt;h1&gt;Introduction&lt;/h1&gt;

&lt;p&gt;Importer les donn√©es en masse est un travail risqu√© et laborieux. Au-del√† de l'import, il faut en effet v√©rifier que toutes les donn√©es ont √©t√© effectivement import√©es. Si ce n'est pas le cas, il faut d√©terminer les donn√©es non import√©es pour ne r√©importer que celles-ci du fait des contenus tr√®s volumineux qu'on peut √™tre amen√©s √† traiter (plusieurs centaines de Go, voire plusieurs To).&lt;/p&gt;

&lt;p&gt;Cet article d√©crit l'approche suivie par BlueXML pour importer les donn√©es dans un repository Alfresco Community ou Enterprise.&lt;/p&gt;

&lt;h1&gt;Solution&lt;/h1&gt;

&lt;p&gt;La solution repose sur l'utilisation du module &lt;a href=&quot;https://code.google.com/p/alfresco-bulk-filesystem-import/&quot;&gt;bulk import&lt;/a&gt;. Ce module permet d'importer les contenus et les m√©ta-donn√©es associ√©es si n√©cessaires.&lt;/p&gt;

&lt;p&gt;Dans la version Alfresco Enterprise, le module bulk import a √©t√© repris par Alfresco et propose une fonctionnalit√© d'import &quot;in place&quot; qui √©vite de recopier les fichiers. Celle-ci n'est pas pr√©sente dans la version Alfresco Community et les contenus sont alors import√©es dans Alfresco.&lt;/p&gt;

&lt;h1&gt;Impl√©mentation&lt;/h1&gt;

&lt;p&gt;L'import se fait √† l'aide des √©tapes suivantes :&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;import des donn√©es avec bulk_import&lt;/li&gt;
&lt;li&gt;&lt;p&gt;v√©rification :&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;calcul d'un find sur les donn√©es source&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;calcul d'un find sur les donn√©es dans Alfresco, via l'API Alfresco&lt;/li&gt;
&lt;li&gt;&lt;p&gt;calcul du delta entre les find&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;copie via CIFS des contenus non import√©s la premi√®re fois&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;v√©rification et copie&lt;/li&gt;
&lt;li&gt;copie des derniers fichiers √† la main si pas trop nombreux&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;La difficult√© de cette impl√©mentation est le m√©canisme de calcul du find c√¥t√© Alfresco car celui-ci est limit√© par d√©faut √† 100000 v√©rifications de droits, ce qui posera probl√®me si vous importes plus de 100000 fichiers.&lt;/p&gt;

&lt;p&gt;Il faut obligatoirement mettre en place un t√©l m√©canisme de v√©rification et de contr√¥le car Alfresco n'importe pas toutes les donn√©es, et refuse m√™me d'en importer certains quel que soit le nombre de tentatives. Le contournement le plus simple est donc de copier les contenus r√©calitrants via CIFS √† l'aide d'un rsync.&lt;/p&gt;

&lt;h2&gt;Import des donn√©es via bulk import&lt;/h2&gt;

&lt;p&gt;Le syst√®me de bulk import propose un service web pour importer les donn√©es. Apr√®s avoir indiqu√© quelques param√®tres, il suffit de l'appeler. Pour √™tre totalement ind√©pendant de la connexion au serveur qui peut dans certains cas interrompre l'import, je vous sugg√®re d'utiliser le &lt;a href=&quot;https://gist.github.com/jckermagoret/7769719&quot;&gt;script&lt;/a&gt; suivant :&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;#!/bin/sh

#
# LICENSE
# @copyright BlueDolmen 2013
# License Affero GPL
# Use at your own risks
#

#
# Imports content in Alfresco from filesystem through the use of bulk import system
#

LOGIN=&quot;admin&quot;
PASSWD=&quot;admin&quot;
HOST=&quot;localhost:8080&quot;

getTicket () {
        curl -v &quot;http://$HOST/alfresco/service/api/login?u=$LOGIN&amp;amp;pw=$PASSWD&quot;
};

importContent () {
  TICKET=&quot;TICKET_88e8978b4973801cd309ff8440fbdee49302b130&quot;

  PARAMS=&quot;alf_ticket=$TICKET&quot;
  PARAMS=&quot;$PARAMS&amp;amp;sourceDirectory=/data/repository/initial&quot;
  PARAMS=&quot;$PARAMS&amp;amp;contentStore=default&quot;
  PARAMS=&quot;$PARAMS&amp;amp;targetPath=/Company%20Home/Sites/test/documentLibrary&quot;
  PARAMS=&quot;$PARAMS&amp;amp;replaceExisting=false&quot;
  PARAMS=&quot;$PARAMS&amp;amp;batchSize=10&quot;
  PARAMS=&quot;$PARAMS&amp;amp;numThreads=10&quot;

  #
  # Use only if using for an Alfresco Enterprise
  # -X POST &quot;http://$HOST/alfresco/service/bulkfsimport/inplace/initiate?$PARAMS&quot; \n

  echo curl -v
  echo         -X POST &quot;http://$HOST/alfresco/service/bulkfsimport/initiate?$PARAMS&quot;
  echo         -H &quot;Content-type: text/html;charset=UTF-8&quot;
  echo

  curl -v \
          -X POST &quot;http://$HOST/alfresco/service/bulkfsimport/initiate?$PARAMS&quot; \
          -H &quot;Content-type: text/html;charset=UTF-8&quot;
}

$*
&lt;/code&gt;&lt;/pre&gt;

&lt;h2&gt;V√©rification&lt;/h2&gt;

&lt;p&gt;Il s'agit de construire 2 fichiers contenant le path absolu de chaque fichier contenu dans l'arborescence source et cible.&lt;/p&gt;

&lt;h3&gt;Arborescence source&lt;/h3&gt;

&lt;p&gt;Pour l'arborescence source, un simple find suffit √† obtenir cette liste :&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;find /data/repository/initial &amp;gt; find-initial.txt
&lt;/code&gt;&lt;/pre&gt;

&lt;h3&gt;Arborescence cible&lt;/h3&gt;

&lt;p&gt;Pour l'arborescence cible, il faut √©crire un script qui construit cette liste :&lt;/p&gt;

&lt;h3&gt;Comparaison des fichiers 'source' et 'cible'&lt;/h3&gt;

&lt;p&gt;On obtient finalement 2 fichiers qu'il faut comparer apr√®s les avoir nettoy√©s afin de n'obtenir que les fichiers r√©ellement diff√©rents.&lt;/p&gt;

&lt;h2&gt;Copie des fichiers r√©calcitrants&lt;/h2&gt;

&lt;p&gt;Le delta calcul√© pr√©c√©demment doit √™tre copi√© dans Alfresco. Pour cela, il suffit de faire un rsync prenant en param√®tre la liste des fichiers √† copier :&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;rsync -avP --files-from diff.txt /mnt/alfresco/Company%20Home/tmp
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;tmp √©tant un r√©pertoire cr√©√© dans l'entrep√¥t Alfresco.&lt;/p&gt;

&lt;h1&gt;Conclusion&lt;/h1&gt;

&lt;p&gt;Finalement, toutes les donn√©es sont copi√©es&lt;/p&gt;

&lt;h1&gt;Ressources&lt;/h1&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;http://support.apple.com/kb/ht3939&quot;&gt;Identifier son iPhone&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

</content>
 </entry>
 
 <entry>
   <title>D√©simlocker un iPhone 2G</title>
   <link href="http://jckermagoret.github.io/blogs/blog-jckermagoret/2013/11/23/Desimlocker-un-iphone-3g"/>
   <updated>2013-11-23T00:00:00+01:00</updated>
   <id>http://jckermagoret.github.io/blogs/blog-jckermagoret/2013/11/23/Desimlocker-un-iphone-3g</id>
   <content type="html">&lt;h1&gt;Introduction&lt;/h1&gt;

&lt;p&gt;J'ai un vieil iPhone de premi√®re g√©n√©ration. Evidemment, je n'ai pas la facture et n'ai pas pens√© √† le faire d√©simlocker √† l'√©poque (2007) :-(
Du coup, pas d'autres choix qu'un d√©simlockage sauvage...&lt;/p&gt;

&lt;h1&gt;Vocabulaire&lt;/h1&gt;

&lt;h2&gt;Jailbreak et/ou Unlock ?&lt;/h2&gt;

&lt;p&gt;Le jailbreak, c'est donner la possibilit√© √† votre iphone de ne plus √™tre limit√© aux applications de l'appstore. L'avantage est que vous pouvez par la suite utiliser d'autres sources d'applications, comme Cydia, qui vous permettront de d√©simlocker votre appareil. L'inconv√©nient, et il est de taille, est que vous n'avez justement plus acc√®s √† toutes ces nombreuses applications, toutes plus int√©ressantes les unes que les autres (DoodleJump, Candy Crush, 92s, Runtastic, Scrabble, Bridge...), qui en font l'int√©r√™t.&lt;/p&gt;

&lt;p&gt;L'unlock ou d√©simlockage, c'est d√©bloquer l'appareil pour avoir la possibilit√© de se connecter √† n'importe quel op√©rateur t√©l√©phonique, ceux-ci ayant la f√¢cheuse habitude de bloquer les appareils sur leur syst√®me afin de rendre la client√®le plus captive et plus docile.&lt;/p&gt;

&lt;p&gt;L'id√©al est donc de d√©simlocker sans jailbreaker votre iPhone. Pour les iPhone 2G il semble qu'il faille utiliser yellowsnOw et non ultrasnOw plut√¥t utilis√© pour les iPhone 3G.&lt;/p&gt;

&lt;h2&gt;redsnOw ? ultrasnOw ? yellowsnOw ? iClarified ?&lt;/h2&gt;

&lt;p&gt;Maintenant que nous savons ce que nous voulons, essayons d'y voir plus clair :&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;redsnOw : jailbreak&lt;/li&gt;
&lt;li&gt;ultrasnOw : unlock sur appareil jailbreak√©&lt;/li&gt;
&lt;li&gt;yellowsnOw : unlock sans jailbreak&lt;/li&gt;
&lt;li&gt;iClarified : site r√©f√©ren√ßant des liens de t√©l√©chargement pour toutes ces ressources + de nombreux tutoriaux&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;Il semble que les iPhone r√©cents (√† partir de 3 ? 4 ?) doivent  syst√©matiquement √™tre jailbreak√©s pour √™tre d√©simlock√©s.&lt;/p&gt;

&lt;h1&gt;D√©simlockage&lt;/h1&gt;

&lt;p&gt;J'ai ex√©cut√© ces √©tapes plusieurs fois mais faites attention !!! Vous risquez d'endommager votre iPhone et, bien s√ªr, vous n'aurez plus de garanties (mais qui en a pour un iphone de 2007 ?). Bref, vous entreprenez ces actes sous votre responsabilit√© et √† vos propres risques.&lt;/p&gt;

&lt;p&gt;Peut-√™tre n'√™tes-vous int√©ress√© que par le d√©simlockage ? Malheureusement, je suis d'abord pass√© par un jailbreak et ne peux confirmer que le d√©simlockage peut fonctionner sans jailbreak : pas le courage de recommencer :-)&lt;/p&gt;

&lt;h2&gt;T√©l√©chargement des logiciels&lt;/h2&gt;

&lt;p&gt;Ceci √©tant dit, ex√©cutez les √©tapes suivantes :&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;T√©l√©chargez les logiciels requis :&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;(http://www.mediafire.com/download/q8ksi1g8gqghl6z/redsn0w-mac_0.9.4.zip&quot;&gt;redsn0w 0.9.4&lt;/a&gt;. Attention, utiliser une autre version n'a pas march√© pour mon appareil ;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://iphonehelp.in/ipfiles/BL-39.bin&quot;&gt;Boot Loader 3.9&lt;/a&gt; ;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://iphonehelp.in/ipfiles/BL-46.bin&quot;&gt;Boot Loader 4.6&lt;/a&gt; ;&lt;/li&gt;
&lt;li&gt;3.1.3 (2G): &lt;a href=&quot;http://appldnld.apple.com.edgesuite.net/content.info.apple.com/iPhone/061-7481.20100202.4orot/iPhone1,1_3.1.3_7E18_Restore.ipsw&quot;&gt;iPhone1,1_3.1.3_7E18_Restore.ipsw&lt;/a&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;


&lt;h2&gt;Action !&lt;/h2&gt;

&lt;p&gt;Pour le d√©simlockage en lui-m√™me, je vous invite √† lire un tutorial tr√®s clair sur ce site, contenant de nombreuses captures d'√©cran, sur iClarified √† partir de l'√©tape 3.&lt;/p&gt;

&lt;p&gt;Pour le red√©marrage de votre iPhone apr√®s la mise √† jour du logiciel, il faut appuyer longuement (tr√®s longuement : au - 30 secondes).&lt;/p&gt;

&lt;h1&gt;Ressources&lt;/h1&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;http://support.apple.com/kb/ht3939&quot;&gt;Identifier son iPhone&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://www.sinfuliphone.com/showthread.php?t=10001882&quot;&gt;Old redsnOw versions&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://iphonehelp.in/2009/05/17/download-iphone-bootloader-v39-46-bin/&quot;&gt;Boot loaders 3.9 et 4.6&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://blog.iphone-dev.org/&quot;&gt;iPhone-dev&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://answers.yahoo.com/question/index?qid=20090712020653AAQK2xQ&quot;&gt;Unlock Without Jailbreaking&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://www.iphonehacks.com/2008/03/iphone-iliberty.html&quot;&gt;iLiberty&lt;/a&gt;. Non v√©rifi√© : certains disent qu'on peut d√©simlocker sans jailbreaker avec ce logiciel.&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://www.electronmedia.in/wp/fixing-usb-communication-error-while-unlockingjailbreaking-your-iphone/&quot;&gt;Fixing USB problem&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://www.iclarified.com/entry/index.php?enid=16424&quot;&gt;Numerous redsnOw versions&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

</content>
 </entry>
 
 <entry>
   <title>Quel m√©ta-moteur de recherche pour votre organisation</title>
   <link href="http://jckermagoret.github.io/blogs/blog-jckermagoret/2013/11/19/Configurer-un-meta-moteur-de-recherche"/>
   <updated>2013-11-19T00:00:00+01:00</updated>
   <id>http://jckermagoret.github.io/blogs/blog-jckermagoret/2013/11/19/Configurer-un-meta-moteur-de-recherche</id>
   <content type="html">&lt;h1&gt;Introduction&lt;/h1&gt;

&lt;h1&gt;Vid√©os&lt;/h1&gt;

&lt;h1&gt;Ressources&lt;/h1&gt;

&lt;p&gt;Polyspot&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;http://www.polyspot.com&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;Sinequa&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;http://www.sinequa.com&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;Google Search Appliance&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;https://www.captechconsulting.com/blog/ron-difrango/alfresco-integration-gsa&lt;/li&gt;
&lt;li&gt;http://www.google.com/enterprise/gep/overview.html&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;Exalead&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;http://www.exalead.com&lt;/li&gt;
&lt;/ul&gt;

</content>
 </entry>
 
 <entry>
   <title>Write a documentation in markdown</title>
   <link href="http://jckermagoret.github.io/blogs/blog-jckermagoret/2013/11/15/Rediger-une-documentation-unique-avec-markdown"/>
   <updated>2013-11-15T00:00:00+01:00</updated>
   <id>http://jckermagoret.github.io/blogs/blog-jckermagoret/2013/11/15/Rediger-une-documentation-unique-avec-markdown</id>
   <content type="html">&lt;h1&gt;Introduction&lt;/h1&gt;

&lt;h1&gt;Vid√©o&lt;/h1&gt;

&lt;h1&gt;Resources&lt;/h1&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;http://ooopy.sourceforge.net/&quot;&gt;Concatenate ODF files&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://gist.github.com/schmurfy/3199254&quot;&gt;Update your MacText installation&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://www.jopendocument.org/start_text_1.html&quot;&gt;How to concatenate 2 ODF files&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/dagwieers/asciidoc-odf&quot;&gt;convert asciidoc format to numerous ouput format such as docbook, odf, pdf, ...&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

</content>
 </entry>
 
 <entry>
   <title>SMB (or CIFS) over SSH</title>
   <link href="http://jckermagoret.github.io/blogs/blog-jckermagoret/2013/11/10/SMB-CIFS_over_SSH"/>
   <updated>2013-11-10T00:00:00+01:00</updated>
   <id>http://jckermagoret.github.io/blogs/blog-jckermagoret/2013/11/10/SMB-CIFS_over_SSH</id>
   <content type="html">&lt;h1&gt;The goal&lt;/h1&gt;

&lt;h1&gt;Resources&lt;/h1&gt;

&lt;h2&gt;Description&lt;/h2&gt;

&lt;p&gt;http://www.petri.co.il/whats_port_445_in_w2k_xp_2003.htm#&lt;/p&gt;

&lt;h2&gt;Solutions&lt;/h2&gt;

&lt;p&gt;http://www.minek.com/?port_redirection
http://www.nikhef.nl/~janjust/CifsOverSSH/Win7Loopback.html#MountHome
http://www.blisstonia.com/eolson/notes/smboverssh.php&lt;/p&gt;

&lt;h2&gt;Summary&lt;/h2&gt;

&lt;p&gt;http://sumofungus.wordpress.com/2010/07/23/ssh-tunneling-samba-on-windows-7/&lt;/p&gt;

&lt;h2&gt;Questions&lt;/h2&gt;

&lt;p&gt;http://serverfault.com/questions/356369/smb-proxy-connect-to-smb-server-through-ssh-tunnel-between-two-other-hosts
http://superuser.com/questions/270678/ports-for-nated-windows-share
http://forums.alfresco.com/forum/installation-upgrades-configuration-integration/configuration/cifs-server-subsystem-community&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>What is cross navigation</title>
   <link href="http://jckermagoret.github.io/blogs/blog-jckermagoret/2013/11/08/What_is_cross_navigation"/>
   <updated>2013-11-08T00:00:00+01:00</updated>
   <id>http://jckermagoret.github.io/blogs/blog-jckermagoret/2013/11/08/What_is_cross_navigation</id>
   <content type="html">&lt;h1&gt;The goal&lt;/h1&gt;

&lt;h1&gt;Resources&lt;/h1&gt;
</content>
 </entry>
 
 <entry>
   <title>Implementation of a cross navigation technique in Alfresco</title>
   <link href="http://jckermagoret.github.io/blogs/blog-jckermagoret/2013/11/07/How_to_enhance_your_Alfresco_repository-Implementation"/>
   <updated>2013-11-07T00:00:00+01:00</updated>
   <id>http://jckermagoret.github.io/blogs/blog-jckermagoret/2013/11/07/How_to_enhance_your_Alfresco_repository-Implementation</id>
   <content type="html">&lt;h1&gt;The goal&lt;/h1&gt;

&lt;p&gt;We're going to implement the &lt;a href=&quot;/2013/10/23/&quot;&gt;solution based on paths and content's name analysis&lt;/a&gt;. To achieve such a goal on Alfresco, we need the following things:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;a process to extract categories&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;a script to assign extracted categories on&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;a category browser to cross navigate the entire repository, able to cumulate criteria, to simulate a kind of facet navigation.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;In the example we are going to look at, I started at 4000 categories.&lt;/p&gt;

&lt;h2&gt;Category extraction&lt;/h2&gt;

&lt;p&gt;How to find categories? How to extract them?&lt;/p&gt;

&lt;h3&gt;Finding the categories&lt;/h3&gt;

&lt;p&gt;Let's consider the following directory and file name:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;/Sales/France/West/Nantes/ListOfCustomers.xls&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;We may deduce from this path name, by splitting it on &quot;/&quot; and capitals that the file &quot;ListOfCustomers.xsl&quot; deals with:
* Sales
* France
* West
* Nantes
* List
* Of
* Customers
* Excel&lt;/p&gt;

&lt;p&gt;By applying this technique on all the files contained into your Alfresco repository, you'll have thousands of categories. Which ones do we want?&lt;/p&gt;

&lt;h3&gt;What categories to keep at the end?&lt;/h3&gt;

&lt;p&gt;I want to cross navigate my Alfresco repository through the categories. So only&lt;/p&gt;

&lt;h3&gt;Categories' assignment&lt;/h3&gt;

&lt;h3&gt;Categories navigation&lt;/h3&gt;
</content>
 </entry>
 
 <entry>
   <title>Ecrire un plugin pour Confluence</title>
   <link href="http://jckermagoret.github.io/blogs/blog-jckermagoret/2013/10/29/Ecrire_un_plugin_pour_Confluence"/>
   <updated>2013-10-29T00:00:00+01:00</updated>
   <id>http://jckermagoret.github.io/blogs/blog-jckermagoret/2013/10/29/Ecrire_un_plugin_pour_Confluence</id>
   <content type="html">&lt;h1&gt;Introduction&lt;/h1&gt;

&lt;p&gt;Cette page explique comment √©crire un plugin pour Atlassian.&lt;/p&gt;

&lt;h1&gt;Configuration de l'environnement&lt;/h1&gt;

&lt;h2&gt;Adaptation de l'IDE&lt;/h2&gt;

&lt;p&gt;L'IDE a √©t√© t√©l√©charg√© et configur√© en suivant les instructions sur [cette page][ide-for-linux/mac] sur le site d'Atlassian.&lt;/p&gt;

&lt;p&gt;Pour configurer la jre 1.6.0 sur mon Mac, j'ai ajout√© la d√©finition de la 1.6.0 stock√©e dans le r√©pertoire suivant :&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;/System/Library/Java/JavaVirtualMachines/1.6.0.jdk/Contents/Home&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;Comme expliqu√© dans les commentaires, pour installer maven, indiquer le site suivant comme source pour Juno :&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;http://download.eclipse.org/releases/juno&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;En effet, le site indiqu√© sur JIRA ne contient les r√©f√©rences pour un plugin utile √† maven et l'installation n'est alors pas possible.&lt;/p&gt;

&lt;h2&gt;Installation du SDK&lt;/h2&gt;

&lt;p&gt;L'installation consiste simplement √† le t√©l√©charger et l'installer. Une fois install√©e, vous pouvez alors lancer JIRA en mode d√©veloppement avec la commande suivante :&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;atlas-run-standalone --product jira
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Le syst√®me charge alors les modules et ex√©cutables manquants n√©cessaires. Tomcat est alors d√©marr√©, il faut √™tre patient : le premier lancement a mis 744s sur mon MacBook Pro avec 8 Go de RAM.&lt;/p&gt;

&lt;h1&gt;Vid√©o&lt;/h1&gt;

&lt;h1&gt;Resources&lt;/h1&gt;

&lt;p&gt;[ide for linux/mac] https://developer.atlassian.com/display/DOCS/Set+Up+the+Eclipse+IDE+for+Linux&lt;/p&gt;

&lt;p&gt;[2] https://developer.atlassian.com/display/DOCS/Set+up+the+Atlassian+Plugin+SDK+and+Build+a+Project&lt;/p&gt;

&lt;p&gt;https://developer.atlassian.com/display/CONFDEV/Macro+Module
https://developer.atlassian.com/display/CONFDEV/XWork-WebWork+Module
https://developer.atlassian.com/display/CONFDEV/WoW+Macro+explanation
[3] https://developer.atlassian.com/display/CONFDEV/Write+a+simple+Confluence+Blueprint+plugin&lt;/p&gt;

&lt;p&gt;[4] https://developer.atlassian.com/display/CONFDEV/Writing+Confluence+Plugins&lt;/p&gt;

&lt;p&gt;https://developer.atlassian.com/display/DOCS/Put+the+Final+Polish+on+the+Project+in+Eclipse&lt;/p&gt;

&lt;p&gt;https://developer.atlassian.com/display/DOCS/Plugin+Modules&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>Vid√©o de JIRA Capture</title>
   <link href="http://jckermagoret.github.io/blogs/blog-jckermagoret/2013/10/24/Video_JIRA_Capture"/>
   <updated>2013-10-24T00:00:00+02:00</updated>
   <id>http://jckermagoret.github.io/blogs/blog-jckermagoret/2013/10/24/Video_JIRA_Capture</id>
   <content type="html">&lt;h1&gt;Introduction&lt;/h1&gt;

&lt;p&gt;JIRA Capture est un outil d√©velopp√© par Atlassian pour faciliter la remont√©e d'informations par les testeurs et les utilisateurs.&lt;/p&gt;

&lt;p&gt;Cette courte vid√©o illustre l'utilisation de JIRA Capture pour faciliter les tests et la saisie de bugs. En effet, vous pouvez faire une copie d'√©cran de l'application tout en l'int√©grant dans JIRA d'un seul clic, sans n√©cessiter de r√©aliser un document avec un traitement de texte pour l'y mettre. En outre, cela permet aux d√©veloppeurs de tout de suite constater le bug sans t√©l√©charger le document, ouvrir le traitement de texte, ...&lt;/p&gt;

&lt;h1&gt;Vid√©o&lt;/h1&gt;

&lt;div class=&quot;video-container&quot;&gt;&lt;iframe class=&quot;vimeo-iframe&quot; src=&quot;http://player.vimeo.com/video/77685089 &quot; frameborder=&quot;0&quot;&gt;   &lt;/iframe&gt;&lt;/div&gt;


&lt;h1&gt;Resources&lt;/h1&gt;

&lt;p&gt;[JIRA Capture] https://www.atlassian.com/software/jira-capture/overview&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>How to cross navigate your Alfresco repository and relate things like never before/Implementation</title>
   <link href="http://jckermagoret.github.io/blogs/blog-jckermagoret/2013/10/23/How_to_enhance_your_Alfresco_repository"/>
   <updated>2013-10-23T00:00:00+02:00</updated>
   <id>http://jckermagoret.github.io/blogs/blog-jckermagoret/2013/10/23/How_to_enhance_your_Alfresco_repository</id>
   <content type="html">&lt;h1&gt;The goal&lt;/h1&gt;

&lt;p&gt;I want a system to help me to cross navigate my organization's Alfresco repository.&lt;/p&gt;

&lt;p&gt;Being able to browse categories in Alfresco, I need to enhance my content by adding relevant categories. There are 2 kinds of solutions:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;semantic improvement through content analysis and specific part identification in this content like place, people and organization.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;semantic improvement through paths' and content's name analysis&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;


&lt;h1&gt;The solution: semantic improvement&lt;/h1&gt;

&lt;p&gt;People don't like to input metadata like categories. We're all lazy and even if people were eager at entering some information, the risk would exist they choose the wrong one.&lt;/p&gt;

&lt;h2&gt;Semantic improvement through content analysis&lt;/h2&gt;

&lt;p&gt;There are at least 2 solutions :&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Stanbol, an apache project, which you can download and install into your system&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;OpenCalais, a private project in the cloud from Reuters, which you can use&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;These 2 solutions analyse the content of a document and tag the document when specific information is identified into it and linked with an external database. For example, if a document contains the word &quot;Paris&quot;, this latter will be suggested as a category because there is such an information into external database (dbpedia). The ability to detect places is directly related to the solution and the richness of your external database.&lt;/p&gt;

&lt;p&gt;For example, if your document content contains the word &quot;Marseille&quot;, which is the 2nd french city (for the number of people), Stanbol won't give you any information, which is disappointing enough to prevent people to use such a system.&lt;/p&gt;

&lt;p&gt;More information on this in another post, to write...&lt;/p&gt;

&lt;h2&gt;Semantic improvement through paths' and content's name analysis&lt;/h2&gt;

&lt;p&gt;Another kind of solution consists in analyzing paths and content to extract relevant information. Indeed, while people are reluctant to input metadata, there is one they are used to enter: directory and file names. Moreover, these informations are related to the content.&lt;/p&gt;

&lt;p&gt;By analyzing your repository in such a way, you'll have numerous categories at the end. Just eliminate the ones present once, which means there no added value in cross navigation, and think about the others. Of course, the most used these categories are, the most interesting they are. It's up to you to choose the right analysis level. You may conclude your work with 200 or 300 categories structured into 2 or 3 levels.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;You can then cross navigate on your repository content and relate things like never before.
&lt;/code&gt;&lt;/pre&gt;

&lt;h1&gt;Conclusion&lt;/h1&gt;

&lt;p&gt;I think this technique provides quickly some added value to your repository.&lt;/p&gt;

&lt;p&gt;Next post will provide an implementation example so you can set up this cross navigation.&lt;/p&gt;

&lt;h1&gt;Resources&lt;/h1&gt;

&lt;p&gt;[stanbol] http://stanbol.apache.org
[semantics4alfresco] https://code.google.com/p/semantics4alfresco/&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>Alfresco Audit Analysis solutions benchmark</title>
   <link href="http://jckermagoret.github.io/blogs/blog-jckermagoret/2013/10/18/Alfresco_audit_analysis_solutions_benchmark"/>
   <updated>2013-10-18T00:00:00+02:00</updated>
   <id>http://jckermagoret.github.io/blogs/blog-jckermagoret/2013/10/18/Alfresco_audit_analysis_solutions_benchmark</id>
   <content type="html">&lt;h1&gt;The goal&lt;/h1&gt;

&lt;h1&gt;Resources&lt;/h1&gt;

&lt;p&gt;[auditsurf/github] http://www.atolcd.com/btn-ll/audit-alfresco.html
[auditsurf/overview] https://github.com/atolcd/alfresco-auditsurf&lt;/p&gt;

&lt;p&gt;[aaar/overview] http://fcorti.com/alfresco-audit-analysis-reporting/
[aaar/vm] http://fcorti.com/alfresco-audit-analysis-reporting/aaar-alfresco-audit-analysis-reporting-cloud&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>Comment ameliorer votre application grace aux tests utilisateurs faits avec JIRA Capture</title>
   <link href="http://jckermagoret.github.io/blogs/blog-jckermagoret/2013/08/02/Comment_ameliorer_votre_application_grace_aux_tests_utilisateurs_avec_JIRA_Capture"/>
   <updated>2013-08-02T00:00:00+02:00</updated>
   <id>http://jckermagoret.github.io/blogs/blog-jckermagoret/2013/08/02/Comment_ameliorer_votre_application_grace_aux_tests_utilisateurs_avec_JIRA_Capture</id>
   <content type="html">&lt;h1&gt;Introduction&lt;/h1&gt;

&lt;p&gt;JIRA Capture est un outil d√©velopp√© par Atlassian pour faciliter la remont√©e d'informations par les testeurs et les utilisateurs.&lt;/p&gt;

&lt;h1&gt;Exemple&lt;/h1&gt;

&lt;p&gt;Lorsque vous testez une application, l'id√©al est de pouvoir saisir toutes les informations concernant votre test dans le contexte de celui-ci.&lt;/p&gt;

&lt;p&gt;Vous √™tes par exemple sur l'application suivante, en l'occurrence un formulaire Alfresco int√©gr√© dans une application JS.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/yarma-form.png&quot; width=&quot;800px&quot;/&gt;&lt;/p&gt;

&lt;p&gt;Vous remarquez que les libell√©s sont en anglais au lieu d'√™tre en fran√ßais. Avec JIRA Capture, il vous suffit de cliquer sur l'ic√¥ne JIRA en haut √† droite de l'URL de votre page en cours.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/JIRA-Capture-1.png&quot; width=&quot;800px&quot;/&gt;&lt;/p&gt;

&lt;p&gt;Un nouvel onglet s'ouvre alors avec une capture d'√©cran de la page o√π vous √©tiez pr√©c√©demment. Vous pouvez annoter cette capture d'√©cran gr√¢ce aux outils de retouche int√©gr√©s √† JIRA Capture.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/JIRA-Capture-2.png&quot; width=&quot;800px&quot;/&gt;&lt;/p&gt;

&lt;p&gt;Vous pouvez maintenant saisir les informations caract√©risant l'erreur constat√©e lors de votre test. Le formulaire situ√© √† gauche de la capture d'√©cran pr√©c√©dente vous permet de renseigner toutes les informations n√©cessaires :
* le projet
* le type de remarque (nouvelle fonctionnalit√©, bogue, t√©che, ...)
* le r√©sum√©
* la priorit√©
* le descriptif
* le composant
* ...&lt;/p&gt;

&lt;p&gt;Apr√©s avoir cliqu√© sur le bouton &quot;Cr√©er... &quot;, les informations sont ainsi ajout√©es dans JIRA comme vous pouvez le constater dans la capture d'√©cran suivante :&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/JIRA-Capture-3.png&quot; width=&quot;800px&quot;/&gt;&lt;/p&gt;

&lt;h1&gt;Conclusion&lt;/h1&gt;

&lt;p&gt;JIRA Capture facilite la r√©alisation des tests gr√¢ce √† cet outil. En effet, le principal obstacle constitu√© par la r√©alisation des captures d'√©cran est lev√© car la proc√©dure est extr√™mement simplifi√©e.&lt;/p&gt;

&lt;h1&gt;Resources&lt;/h1&gt;

&lt;p&gt;[JIRA Capture] https://www.atlassian.com/software/jira-capture/overview&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>Java vs Javascript to develop business rules in Alfresco workflows</title>
   <link href="http://jckermagoret.github.io/blogs/blog-jckermagoret/2012/09/23/Java_vs_Javascript_to_develop_business_rules_in_Alfresco_workflows"/>
   <updated>2012-09-23T00:00:00+02:00</updated>
   <id>http://jckermagoret.github.io/blogs/blog-jckermagoret/2012/09/23/Java_vs_Javascript_to_develop_business_rules_in_Alfresco_workflows</id>
   <content type="html">&lt;p&gt;While Javascript Server Side may seem easier, it's a real mess to debug. So, I clearly prefer to use Java which avoid this kind of problems thanks to JPDA.&lt;/p&gt;

&lt;p&gt;For example, use the following javascript snippet into a transition in an Alfresco Workflow based on jBPM (and generated with SIDE to make thinks a lot easier):&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;var node =bpm_package.children[0];

var destination = node.parent.parent.childByNamePath(&quot;achieved&quot;);

if (node.shortType == 'YAMMA:com_bluexml_side_yamma_OutgoingMail') {
        destination = destination.childByNamePath(&quot;mail&quot;);
} else if (node.shortType == 'YAMMA:com_bluexml_side_yamma_Invoice') {
        destination = destination.childByNamePath(&quot;invoice&quot;);
} else if (node.shortType == 'YAMMA:com_bluexml_side_yamma_Quotation') {
        destination = destination.childByNamePath(&quot;quotation&quot;);
}

node.move(destination);
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;There is an error which is very difficult to diagnose if you don't know it. The error message just tells you that there is a '}' missing at the 3rd line of your script. Well, in fact, nothing's missing! You must just type node.shortType instead of node.typeShort to make things working smoothly!&lt;/p&gt;

&lt;p&gt;You can try to activate the javascript debugger but it won't be very useful because once loaded, the javascript code corresponding to your transition appears on one line. So debugging step by step is not very efficient.&lt;/p&gt;

&lt;p&gt;What a difference with Java in which you have tools, mature and well tested, to help you to develop the code you need.&lt;/p&gt;

&lt;p&gt;Thanks to JPDA, it's really easy.&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>Javascript logging</title>
   <link href="http://jckermagoret.github.io/blogs/blog-jckermagoret/2012/09/21/Javascript_logging"/>
   <updated>2012-09-21T00:00:00+02:00</updated>
   <id>http://jckermagoret.github.io/blogs/blog-jckermagoret/2012/09/21/Javascript_logging</id>
   <content type="html">&lt;p&gt;When you want to develop in javascript, you look for usual tools in programing languages. One of the best tool in Java is log4j. It's a tool to help developers to insert information in their code and display this information according the configuration. I t means you may have test and production configuration without the need to change anything.&lt;/p&gt;

&lt;p&gt;I gave a glimpse to google about javascript and logging and it gave me back 2 answers which seem of interest. It was:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;log4js&lt;/li&gt;
&lt;li&gt;log4javascript&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;I first gave a try to log4js because of its name, very similar to the log4j for Java. Unfortunately, it didn't work correctly with my javascript application, because of a conflict.&lt;/p&gt;

&lt;p&gt;I didn't go further and tried log4javascript. It worked immediately like a charm. Here is the magic lines. Just add the following at the top of your html page:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;lt;script type=&quot;text/javascript&quot; src=&quot;/resources/common/js/misc/log4javascript.js&quot;&amp;gt;&amp;lt;/script&amp;gt;
&amp;lt;script&amp;gt;
    log4javascript.setEnabled(true);
    var pua = new log4javascript.PopUpAppender();
    log4javascript.getDefaultLogger().addAppender(pua);
    log4javascript.getLogger(&quot;SIDE.Observer&quot;).addAppender(pua);
    log4javascript.getLogger(&quot;SIDE.Tree&quot;).addAppender(pua);

    // You can define explicitely a var to set the log level
    var lsa = log4javascript.getLogger(&quot;SIDE.Authenticate&quot;);
    lsa.setLevel(log4javascript.Level.INFO);
    lsa.addAppender(pua);
    log4javascript.getLogger(&quot;SIDE.Util&quot;).addAppender(pua);
    log4javascript.getLogger(&quot;SIDE.Preview&quot;).addAppender(pua);
&amp;lt;/script&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;As stated in the code, you can define explicitely a var to set the log level.&lt;/p&gt;

&lt;p&gt;It works very well and the log window does the job.&lt;/p&gt;

&lt;p&gt;To conclude, log4js would certainly do the job but for any reasons, it didn't when I tried. Nevermind, these tools are mature and they work the same way, so don't be worry. Take the one that does the job for you the fastest.&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>Alfresco "document-details" Page Customization</title>
   <link href="http://jckermagoret.github.io/blogs/blog-jckermagoret/2012/09/01/Alfresco_%22document-details%22_Page_Customization"/>
   <updated>2012-09-01T00:00:00+02:00</updated>
   <id>http://jckermagoret.github.io/blogs/blog-jckermagoret/2012/09/01/Alfresco_"document-details"_Page_Customization</id>
   <content type="html">&lt;p&gt;The document-details page is defined in the page directory located $TOMCAT/webapps/share/WEB-INF/classes/alfresco/site-data/pages/document-details.xml:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;lt;?xml version='1.0' encoding='UTF-8'?&amp;gt;
&amp;lt;page&amp;gt;
   &amp;lt;title&amp;gt;Document Details&amp;lt;/title&amp;gt;
   &amp;lt;title-id&amp;gt;page.documentDetails.title&amp;lt;/title-id&amp;gt;
   &amp;lt;description&amp;gt;Document details&amp;lt;/description&amp;gt;
   &amp;lt;description-id&amp;gt;page.documentDetails.description&amp;lt;/description-id&amp;gt;
   &amp;lt;template-instance&amp;gt;document-details&amp;lt;/template-instance&amp;gt;
   &amp;lt;authentication&amp;gt;user&amp;lt;/authentication&amp;gt;
&amp;lt;/page&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This page uses the document-details template as indicated, located at $TOMCAT/webapps/share/WEB-INF/classes/alfresco/site-data/template-instances/document-details.xml&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;lt;?xml version='1.0' encoding='UTF-8'?&amp;gt;
&amp;lt;template-instance&amp;gt;
   &amp;lt;template-type&amp;gt;org/alfresco/document-details&amp;lt;/template-type&amp;gt;
   &amp;lt;properties&amp;gt;
      &amp;lt;pageFamily&amp;gt;documentlibrary&amp;lt;/pageFamily&amp;gt;
      &amp;lt;container&amp;gt;documentLibrary&amp;lt;/container&amp;gt;
   &amp;lt;/properties&amp;gt;
&amp;lt;/template-instance&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The document-details page is the result of the aggregation of the (take a deep breath :-) $TOMCAT/webapps/share/WEB-INF/classes/alfresco/templates/org/alfresco/document-details.ftl which looks like this for its most important part:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;lt;div&amp;gt;
    &amp;lt;div&amp;gt;
        &amp;lt;@region id=doclibType + &quot;document-metadata-header&quot; scope=&quot;template&quot; protected=true /&amp;gt;
        &amp;lt;@region id=doclibType + &quot;document-metadata&quot; scope=&quot;template&quot; protected=true /&amp;gt;
        &amp;lt;@region id=doclibType + &quot;document-info&quot; scope=&quot;template&quot; protected=true /&amp;gt;
        &amp;lt;@region id=doclibType + &quot;document-versions&quot; scope=&quot;template&quot; protected=true /&amp;gt;
    &amp;lt;/div&amp;gt;
    &amp;lt;div&amp;gt;
        &amp;lt;@region id=doclibType + &quot;document-actions&quot; scope=&quot;template&quot; protected=true /&amp;gt;
        &amp;lt;@region id=doclibType + &quot;document-links&quot; scope=&quot;template&quot; protected=true /&amp;gt;
        &amp;lt;#if doclibType?starts_with(&quot;dod5015&quot;)&amp;gt;
            &amp;lt;@region id=doclibType + &quot;document-references&quot; scope=&quot;template&quot; protected=true /&amp;gt;
        &amp;lt;/#if&amp;gt;
    &amp;lt;/div&amp;gt;
&amp;lt;/div&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The only part a little strange is that the core of this page, consisting of the metadata is not processed the same way, which would make customization a lot easier. Instead of that, they use the form component to render the document metadata. Maybe to provide inline update later, but for the moment, I just want to render my metadata and I prefer to have a consistent way to do this.&lt;/p&gt;

&lt;p&gt;So, I replaced the:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;lt;@region id=doclibType + &quot;document-metadata&quot; scope=&quot;template&quot; protected=true /&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;by:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;lt;@region id=doclibType + &quot;document-metadata-core&quot; scope=&quot;template&quot; protected=true /&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;and then defined the corresponding template, webscript and component.&lt;/p&gt;

&lt;p&gt;First, indicate the component to use when the document-metadata-core region is used from the document-details template. This happens in $TOMCAT/share/WEB-INF/classes/alfresco/site-data/components/template.document-metadata-core.document-details.xml:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;lt;?xml version='1.0' encoding='UTF-8'?&amp;gt;
&amp;lt;component&amp;gt;
   &amp;lt;scope&amp;gt;template&amp;lt;/scope&amp;gt;
   &amp;lt;region-id&amp;gt;document-metadata-core&amp;lt;/region-id&amp;gt;
   &amp;lt;source-id&amp;gt;document-details&amp;lt;/source-id&amp;gt;
   &amp;lt;url&amp;gt;/components/document-details/document-metadata-core&amp;lt;/url&amp;gt;
&amp;lt;/component&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Second, define $TOMCAT/webapps/share/WEB-INF/classes/alfresco/site-webscripts/org/alfresco/components/document-details/document-metadata-core.get.(desc|head|html).xml files with the following content: 2.1: document-metadata-core.get.desc.html:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;lt;webscript&amp;gt;
  &amp;lt;shortname&amp;gt;document-metadata-core&amp;lt;/shortname&amp;gt;
  &amp;lt;description&amp;gt;Document Metadata Core Component&amp;lt;/description&amp;gt;
  &amp;lt;url&amp;gt;/components/document-details/document-metadata-core&amp;lt;/url&amp;gt;
&amp;lt;/webscript&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;h2&gt;document-metadata-core.get.head.html:&lt;/h2&gt;

&lt;pre&gt;&lt;code&gt;&amp;lt;#include &quot;../component.head.inc&quot;&amp;gt;
&amp;lt;!-- Document Metadata Header --&amp;gt;
&amp;lt;@link rel=&quot;stylesheet&quot; type=&quot;text/css&quot; href=&quot;${page.url.context}/components/document-details/document-metadata-core.css&quot; /&amp;gt;
&amp;lt;@script type=&quot;text/javascript&quot; src=&quot;${page.url.context}/components/document-details/document-metadata-core.js&quot;&amp;gt;&amp;lt;/@script&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;h2&gt;document-metadata-core.get.html:&lt;/h2&gt;

&lt;pre&gt;&lt;code&gt;&amp;lt;script type=&quot;text/javascript&quot;&amp;gt;//&amp;lt;![CDATA[
   new Alfresco.DocumentMetadataCore(&quot;${args.htmlid}&quot;).setMessages(${messages});
//]]&amp;gt;&amp;lt;/script&amp;gt;
&amp;lt;div id=&quot;metadata-core&quot;&amp;gt;
   &amp;lt;div&amp;gt;${msg(&quot;document-metadata-core.heading&quot;)}&amp;lt;/div&amp;gt;
   &amp;lt;h1&amp;gt;&amp;gt;Woooh, juste un peu de texte :-)&amp;lt;/h1&amp;gt;
&amp;lt;/div&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Lastly, we define $TOMCAT/webapps/share/components/document-details/document-metadata-core.js which will be compressed in document-metadata-core-min.js later:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;/**
 * Document metadata-core component.
 *
 * @namespace Alfresco
 * @class Alfresco.DocumentMetadataCore
 */
(function()
{
   var Dom = YAHOO.util.Dom;
   var $html = Alfresco.util.encodeHTML;

   /**
    * DocumentMetadataCore constructor.
    *
    * @param {String} htmlId The HTML id of the parent element
    * @return {Alfresco.DocumentMetadataCore} The new DocumentMetadataCore instance
    * @constructor
    */
   Alfresco.DocumentMetadataCore = function(htmlId)
   {
      Alfresco.DocumentMetadataCore.superclass.constructor.call(this, &quot;Alfresco.DocumentMetadataCore&quot;, htmlId);*/

      /* Decoupled event listeners */
      YAHOO.Bubbling.on(&quot;documentDetailsAvailable&quot;, this.onDocumentDetailsAvailable, this);

      return this;
   };

   YAHOO.extend(Alfresco.DocumentMetadataCore, Alfresco.component.Base,
   {
      onDocumentDetailsAvailable: function DocumentMetadataCore_onDocumentDetailsAvailable(layer, args)
      {
      // Just write your code there
      }
   });
})();
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Through the use of bubbling (kind of Observer pattern), the document-details page updates when the &quot;documentDetailsAvailable&quot; event fires and the method above is played thanks to the following line:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;YAHOO.Bubbling.on(&quot;documentDetailsAvailable&quot;, this.onDocumentDetailsAvailable, this);
&lt;/code&gt;&lt;/pre&gt;
</content>
 </entry>
 
 <entry>
   <title>How to initialize a git repository from an existing content</title>
   <link href="http://jckermagoret.github.io/blogs/blog-jckermagoret/2012/07/13/How_to_initialize_a_git_repository_from_an_existing_content"/>
   <updated>2012-07-13T00:00:00+02:00</updated>
   <id>http://jckermagoret.github.io/blogs/blog-jckermagoret/2012/07/13/How_to_initialize_a_git_repository_from_an_existing_content</id>
   <content type="html">&lt;p&gt;I'm sure it's not the shortest way to do it, but at least, it works :-)&lt;/p&gt;

&lt;h1&gt;Create the git repository&lt;/h1&gt;

&lt;p&gt;To achieve this, create the following script and name it create-git-repo.sh:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;#!/bin/sh

REPO_NAME=$1
DESC=$2

GIT_SERVER=git.side-labs.org
OWNER=&quot;Jean-Christophe+Kermagoret&amp;lt;jck@bluexml.com&amp;gt;&quot;
REPOSITORIES=&quot;/data/local/scm/git/$GIT_SERVER/repositories&quot;
GITWEB_PROJECTS=&quot;/&quot;
CLONEURL=&quot;https://git.side-labs.org/git/$REPO_NAME&quot;

# create a new bare repository
cd $REPOSITORIES
sudo -u www-data git init --bare $REPO_NAME
cd $REPO_NAME
#sudo -u git touch git-daemon-export-ok

# additional set-up for Gitweb
echo &quot;$DESC&quot; | sudo -u www-data tee description
echo &quot;$REPO_NAME $OWNER&quot; | sudo -u www-data tee -a GITWEB_PROJECTS
echo &quot;$CLONEURL&quot; | sudo -u www-data tee cloneurl
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Then to create the repo, just type the following&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;root# sh create-git-repo.sh YaRma &quot;Yet Another Requisition Management Application with SIDE&quot;
&lt;/code&gt;&lt;/pre&gt;

&lt;h1&gt;Import existing content&lt;/h1&gt;

&lt;p&gt;Second, go into the directory where is stored your existing content (not the repository for the moment!)&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;root# git init
root# git add .
root# git commit -m &quot;Initial import&quot;
root# git remote add origin /opt/local/scm/git/git.side-labs.org/repositories/YaRma.git
root# git push --all
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Now, it's time to just check your installation through gitweb.&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>Component Content Management System</title>
   <link href="http://jckermagoret.github.io/blogs/blog-jckermagoret/2012/01/13/Component_Content_Management_System"/>
   <updated>2012-01-13T00:00:00+01:00</updated>
   <id>http://jckermagoret.github.io/blogs/blog-jckermagoret/2012/01/13/Component_Content_Management_System</id>
   <content type="html">&lt;h1&gt;The Problem To Address&lt;/h1&gt;

&lt;p&gt;One more time, to prepare a course, I had to browse all the documentation I wrote to find the right material I needed. Of course, I had to rewrite part of it because it was not structured the right way. I think it's time to organize my content in a way I can reuse it.&lt;/p&gt;

&lt;h1&gt;The Solution&lt;/h1&gt;

&lt;p&gt;Some solution exist and are called Component Content System. Wikipedia gives us a very clear definition:&lt;/p&gt;

&lt;p&gt;A component content management system (CCMS) is a content management system that manages content at a granular level (component) rather than at the document level. Each component represents a single topic, concept or asset (e.g., image, table, product description). Components can be as large as a chapter or as small as a definition or even a word. Components in multiple content assemblies (content types) can be viewed as components or as traditional documents.
So, in short, I want unit of imformation at an enough low level granularity so I can recreate the content I want it by simply recombining it by hand, through automatic queries based on classification, structure, ...&lt;/p&gt;

&lt;h1&gt;The Reality&lt;/h1&gt;

&lt;p&gt;Well, it looks like DITA or Docbook.&lt;/p&gt;

&lt;h2&gt;DocBook&lt;/h2&gt;

&lt;p&gt;I already used Docbook and it's true you can do amazing things but you need to write everything in XML according the docbook schema. OOo does not support it very well and it's a little too complex for non technical users. I tried docbook2odp, which generate clean OOo Presentation but you still need to work with Docbook. I had a look to wiki syntax, such mediawiki, because there is an XML extension to get Docbook format. Unfortunately, exporting preformatted code gives a poor result, so I need to fix it manually. Too boring.&lt;/p&gt;

&lt;h2&gt;rST&lt;/h2&gt;

&lt;p&gt;I had a look too at rST (reStructuredText) to generate OOo Presentations with rST2odp which almost don't need to be fixed. Moreover, you can apply an OOo Presentation template during rST to odp generation. Unfortunately, there are no tools to convert mediawiki to rST.&lt;/p&gt;

&lt;h1&gt;Conclusion&lt;/h1&gt;

&lt;p&gt;My requirement is finally very simple. How to make all these tools communicate so I can use my preferred input type and get my preferred output for the tasks I have to achieve? Of course without fixing or rewriting anyting. Just reuse?&lt;/p&gt;

&lt;p&gt;I guess I need to go further on DITA which seems the way to go.&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>SSL configuration on Tomcat for Alfresco authentication with Ldaps</title>
   <link href="http://jckermagoret.github.io/blogs/blog-jckermagoret/2011/08/01/SSL_configuration_on_Tomcat_for_Alfresco_authentication_with_Ldaps"/>
   <updated>2011-08-01T00:00:00+02:00</updated>
   <id>http://jckermagoret.github.io/blogs/blog-jckermagoret/2011/08/01/SSL_configuration_on_Tomcat_for_Alfresco_authentication_with_Ldaps</id>
   <content type="html">&lt;h1&gt;Use Case&lt;/h1&gt;

&lt;p&gt;I want Alfresco to be able to authenticate on a Ldap server, secured with SSL.&lt;/p&gt;

&lt;h1&gt;Problem&lt;/h1&gt;

&lt;p&gt;Ldaps is a ldap service secured on SSL. So you need to accept the SSL certificate to use the service.&lt;/p&gt;

&lt;h1&gt;Solution&lt;/h1&gt;

&lt;p&gt;To do so in the java world, you need a java keystore which stores the certificates (and private keys too). This is a file usually stored in /etc/java/keystore.jks&lt;/p&gt;

&lt;h2&gt;Installation&lt;/h2&gt;

&lt;p&gt;You first need to get the SSL certificate of the ldaps service. You can get it through openssl command:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;openssl s_client -connect YOUR_SERVER:YOUR_PORT -showcerts
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Just copy the lines beetween -BEGIN- until -END- with these latter included into ldaps.crt for example. If you want a more automated procedure, just have a look to get-cert script which wraps &quot;openssl s_client&quot;. You can then import it into your keystore:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;keytool -import -alias ldaps -file ldaps.crt -keystore /etc/java/keystore.jks
&lt;/code&gt;&lt;/pre&gt;

&lt;h1&gt;Usage&lt;/h1&gt;

&lt;p&gt;Just launch Tomcat with the following option:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;export JAVA_OPTS=$JAVA_OPTS' -Djavax.net.ssl.trustStore=/etc/java/keystore.jks'
&lt;/code&gt;&lt;/pre&gt;
</content>
 </entry>
 
 <entry>
   <title>Email Management System</title>
   <link href="http://jckermagoret.github.io/blogs/blog-jckermagoret/2011/06/12/Email_Management_System"/>
   <updated>2011-06-12T00:00:00+02:00</updated>
   <id>http://jckermagoret.github.io/blogs/blog-jckermagoret/2011/06/12/Email_Management_System</id>
   <content type="html">&lt;h1&gt;Use Case&lt;/h1&gt;

&lt;p&gt;How to manage emails in a document management system so it is as convenient as a mail client? Not only plain emails with only a text body, but complex ones with a text body, an html one, one or more attachments?&lt;/p&gt;

&lt;h1&gt;Requirements&lt;/h1&gt;

&lt;p&gt;Manage emails means:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;file them&lt;/li&gt;
&lt;li&gt;process them through workflows&lt;/li&gt;
&lt;li&gt;link to them&lt;/li&gt;
&lt;li&gt;reuse them&lt;/li&gt;
&lt;li&gt;resend them&lt;/li&gt;
&lt;/ul&gt;


&lt;h1&gt;Analysis&lt;/h1&gt;

&lt;p&gt;Mails can be seen:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;as a whole: the .eml file&lt;/li&gt;
&lt;li&gt;as a set of parts: the meta-data, the text body, the attachments&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;While the .eml file is interesting from a legal point of view, it is not practical because of the necessity to process it each time you want to access it. In contrast, the set of parts, while very interesting from accessibility is more difficult to prevent from modifications.&lt;/p&gt;

&lt;h1&gt;Solution&lt;/h1&gt;

&lt;p&gt;The obvious solution is to mix the 2 solutions. So:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;REQ1 : a folder to store all the parts of the mail with a name corresponding to the mail subject&lt;/li&gt;
&lt;li&gt;REQ2: body&lt;/li&gt;
&lt;li&gt;REQ3: attachment1, attachment2, ...&lt;/li&gt;
&lt;li&gt;REQ4: some meta-data added to an element (folder or body?) to store a link on the .eml archive&lt;/li&gt;
&lt;li&gt;REQ5: ability to link from any document to the mail parts&lt;/li&gt;
&lt;/ul&gt;


&lt;h1&gt;Alfresco&lt;/h1&gt;

&lt;p&gt;The solution provided by Alfresco doesn't meet our requiremsnts. In Alfresco, through IMAP subsystem, messages are stored like the following:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Message_1717.eml, the archive with all the embedded content&lt;/li&gt;
&lt;li&gt;Message_1717.eml-attachments, a folder with all the attachments extracted from the previous .eml&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;It is not very interesting from a user point of view when browsing the application (Share or another one) because file names are not readable. Attachment names are readable, but not the text body corresponding to the main message which is encapsulated into the .eml file.&lt;/p&gt;

&lt;p&gt;To achieve:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;REQ1: store the Message-1717.eml file into the corresponding folder (+-attachments), extract the mail subject and rename the folder and the body to this latter&lt;/li&gt;
&lt;li&gt;REQ2: extract the body by transforming the email to text&lt;/li&gt;
&lt;li&gt;REQ3: attachments are ok&lt;/li&gt;
&lt;li&gt;REQ4: extract meta-data from the document by playing the extract common action on the message&lt;/li&gt;
&lt;li&gt;REQ5: let access to the elements and still protecting them from modifications&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;Finally, the order to follow is:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;REQ1: this can be done during file replication from system 1 to 2 in a multi-tenant Alfresco server&lt;/li&gt;
&lt;li&gt;REQ4: configure an action to extract meta-data&lt;/li&gt;
&lt;li&gt;REQ2: configure an action to transform the content&lt;/li&gt;
&lt;li&gt;REQ3: attachments are still ok&lt;/li&gt;
&lt;li&gt;REQ5: security configuration&lt;/li&gt;
&lt;li&gt;REQ1 can be done through file manipulations REQ4 and REQ2 can be done in the same action. REQ5 is Alfresco configuration&lt;/li&gt;
&lt;/ul&gt;


&lt;h1&gt;Precautions&lt;/h1&gt;

&lt;p&gt;Folders containing mails must be preserved from modifications.&lt;/p&gt;

&lt;h1&gt;Conclusion&lt;/h1&gt;

&lt;p&gt;By adding workflows, launched automatically, it is possible to get an (e)mail management system. Based on a multi-tenant system, this architecture my provide the base for the YaMma application.&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>SSL configuration on Apache as a front end for Alfresco</title>
   <link href="http://jckermagoret.github.io/blogs/blog-jckermagoret/2011/05/23/SSL_configuration_on_Apache_as_a_front_end_for_Alfresco"/>
   <updated>2011-05-23T00:00:00+02:00</updated>
   <id>http://jckermagoret.github.io/blogs/blog-jckermagoret/2011/05/23/SSL_configuration_on_Apache_as_a_front_end_for_Alfresco</id>
   <content type="html">&lt;h1&gt;Use Case&lt;/h1&gt;

&lt;p&gt;I want to secure Alfresco (webdav) and Share Access through SSL.&lt;/p&gt;

&lt;h1&gt;Solution&lt;/h1&gt;

&lt;p&gt;The solution is to secure Alfresco access through Apache-SSL.&lt;/p&gt;

&lt;p&gt;Why not directly use Tomcat SSL? Because I want to protect 2 tomcat instances and only make one SSL installation. Moreover, I need some Apache specific features like rewriting ones.&lt;/p&gt;

&lt;p&gt;Only Apache access will be available so Alfresco will be available through ProxyPass features. Direct access is prohibited at the tomcat level.&lt;/p&gt;

&lt;h1&gt;Configuration&lt;/h1&gt;

&lt;h2&gt;SSL Configuration&lt;/h2&gt;

&lt;pre&gt;&lt;code&gt;cd /etc/ssl
openssl genrsa -des3 -rand file1:file2:file3:file4:file5 -out server-with-passphrase.key 2048
openssl rsa -in server-with-passphrase.key -out server.pem
openssl req -new -key server.pem -out server.csr
openssl x509 -req -days 365 -in server.csr -signkey server.pem -out server.crt
&lt;/code&gt;&lt;/pre&gt;

&lt;h2&gt;SSL Apache Configuration&lt;/h2&gt;

&lt;p&gt;You can then create the following configuration into your apache configuration file:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;SSLEngine on
SSLCipherSuite ALL:!ADH:!EXPORT56:RC4+RSA:+HIGH:+MEDIUM:+LOW:+SSLv2:+EXP:+eNULL
SSLCertificateFile /etc/ssl/certs-specific/gollum.bluexml.com.crt
SSLCertificateKeyFile  /etc/ssl/private/gollum.bluexml.com.pem
&lt;/code&gt;&lt;/pre&gt;

&lt;h2&gt;ProxyPass Apache Configuration&lt;/h2&gt;

&lt;p&gt;Don't forget to activate proxy_http module:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;a2enmod proxy_http
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;You can then create the following configuration into your apache configuration file:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;lt;Proxy *&amp;gt;
  AddDefaultCharset Off
  Order deny,allow
  Allow from all
&amp;lt;/Proxy&amp;gt;

ProxyPass /share http://localhost:8080/share
ProxyPassReverse /share http://localhost:8080/share

ProxyPass /alfresco http://localhost:8080/alfresco
ProxyPassReverse /alfresco http://localhost:8080/alfresco
&lt;/code&gt;&lt;/pre&gt;
</content>
 </entry>
 
 <entry>
   <title>Automatic Java Class Generation From jBPM Process Definition File</title>
   <link href="http://jckermagoret.github.io/blogs/blog-jckermagoret/2011/03/12/Automatic_Java_Class_Generation_From_jBPM_Process_Definition_File"/>
   <updated>2011-03-12T00:00:00+01:00</updated>
   <id>http://jckermagoret.github.io/blogs/blog-jckermagoret/2011/03/12/Automatic_Java_Class_Generation_From_jBPM_Process_Definition_File</id>
   <content type="html">&lt;h1&gt;Goal&lt;/h1&gt;

&lt;p&gt;This page explains how to automatically add action in a jBPM workflow and generate the corresponding java class from a jBPM processdefinition file for each added action. At the end, you'll have a java class with a method for each action in transitions and events. The methods only contain a log statement at first. You then can inherit from it and customize the code if you want.&lt;/p&gt;

&lt;h1&gt;Solution&lt;/h1&gt;

&lt;p&gt;The solution is achieved in 2 steps:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;add a java action for each transition and event&lt;/li&gt;
&lt;li&gt;generate the java class with a method for each action&lt;/li&gt;
&lt;/ul&gt;


&lt;h1&gt;Add a Java action for each transition and event&lt;/h1&gt;

&lt;p&gt;This is done through this xsl code snippet extracted from this xsl stylesheet.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;lt;xsl:template match=&quot;transition|event&quot;&amp;gt;
        &amp;lt;xsl:element name=&quot;{name()}&quot;&amp;gt;
                &amp;lt;xsl:copy-of select=&quot;@*&quot;/&amp;gt;
                &amp;lt;xsl:choose&amp;gt;
                        &amp;lt;xsl:when test=&quot;not(action)
                                        or (action and $replaceActions = 'true')&quot;&amp;gt;
                                &amp;lt;action&amp;gt;
                                        &amp;lt;xsl:apply-templates select=&quot;.//script&quot;/&amp;gt;
                                &amp;lt;/action&amp;gt;
                        &amp;lt;/xsl:when&amp;gt;
                        &amp;lt;xsl:otherwise&amp;gt;
                                &amp;lt;xsl:apply-templates/&amp;gt;
                        &amp;lt;/xsl:otherwise&amp;gt;
                &amp;lt;/xsl:choose&amp;gt;
        &amp;lt;/xsl:element&amp;gt;
&amp;lt;/xsl:template&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;h1&gt;Generate the Java class with a method for each action&lt;/h1&gt;

&lt;p&gt;This is done through this xsl code snippet extracted from this xsl stylesheet.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;lt;xsl:template name=&quot;create-java-class&quot;&amp;gt;
        &amp;lt;xsl:param name=&quot;package&quot;/&amp;gt;
        &amp;lt;xsl:param name=&quot;class&quot;/&amp;gt;

package &amp;lt;xsl:value-of select=&quot;$package&quot;/&amp;gt;;

import org.sidelabs.workflow.SIDEActionHandler;

import org.apache.commons.logging.Log;
import org.apache.commons.logging.LogFactory;

public class &amp;lt;xsl:value-of select=&quot;$class&quot;/&amp;gt; extends SIDEActionHandler {

        private static final long serialVersionUID = 1L;
        private static Log logger = LogFactory.getLog(&amp;lt;xsl:value-of select=&quot;$class&quot;/&amp;gt;.class);

        /**
         * Transitions
         */
        &amp;lt;xsl:apply-templates select=&quot;.//transition&quot;/&amp;gt;

        /**
         * Events
         */
        &amp;lt;xsl:apply-templates select=&quot;.//event&quot;/&amp;gt;

}
        &amp;lt;/xsl:template&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;h1&gt;Action&lt;/h1&gt;

&lt;p&gt;An ant script is provided in the SIDE-deployer project. Java classes will be stored into the provided package. The class name is based on the name of the workflow. Don't forget to capitalize your workflow name in your SIDE model!&lt;/p&gt;

&lt;h1&gt;Build Java classes (and replace existing actions)&lt;/h1&gt;

&lt;p&gt;Java classes will be stored into the provided package. The class name is based on the name of the workflow. Don't forget to capitalize your workflow name in your SIDE model!&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;./build.sh improve-workflows \ -Dworkflow.action.package=&quot;org.sidelabs.is.operational.workflow&quot; -DuseProcessDefinitionName=&quot;true&quot; -DreplaceActions=&quot;true&quot;
&lt;/code&gt;&lt;/pre&gt;

&lt;h1&gt;Choose the name of the main class if required&lt;/h1&gt;

&lt;pre&gt;&lt;code&gt;./build.sh improve-workflows \
  -Dworkflow.action.package=&quot;org.sidelabs.is.operational.workflow&quot;
  -Dworkflow.action.class=&quot;Dispatch&quot;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Choose not to replace already existing actions&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;./build.sh improve-workflows \
  -Dworkflow.action.package=&quot;org.sidelabs.is.operational.workflow&quot;
  -useProcessDefinitionName=&quot;true&quot;
  -DreplaceActions=&quot;true&quot;
&lt;/code&gt;&lt;/pre&gt;

&lt;h1&gt;Conclusion&lt;/h1&gt;

&lt;p&gt;You get the following java class:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;package org.sidelabs.is.operational.workflow;

import org.sidelabs.workflow.SIDEActionHandler;

import org.apache.commons.logging.Log;
import org.apache.commons.logging.LogFactory;

public class Yamma extends SIDEActionHandler {

        private static final long serialVersionUID = 1L;
        private static Log logger = LogFactory.getLog(Yamma.class);

        /**
         * Transitions
         */

                /**
                  * @param none
                  *
                  * @return void
                  **/
                public void initialize() {
                        logger.debug(&quot;Processing: initialize&quot;);
                }

                /**
                  * @param none
                  *
                  * @return void
                  **/
                public void checkQuality() {
                        logger.debug(&quot;Processing: checkQuality&quot;);
                }

                /**
                  * @param none
                  *
                  * @return void
                  **/
                public void accountingIsNOK() {
                        logger.debug(&quot;Processing: accountingIsNOK&quot;);
                }

                /**
                  * @param none
                  *
                  * @return void
                  **/
                public void accountingIsOK() {
                        logger.debug(&quot;Processing: accountingIsOK&quot;);
                }

                /**
                  * @param none
                  *
                  * @return void
                  **/
                public void legalIsNOK() {
                        logger.debug(&quot;Processing: legalIsNOK&quot;);
                }

                /**
                  * @param none
                  *
                  * @return void
                  **/
                public void legalIsOK() {
                        logger.debug(&quot;Processing: legalIsOK&quot;);
                }

                /**
                  * @param none
                  *
                  * @return void
                  **/
                public void finish1() {
                        logger.debug(&quot;Processing: finish1&quot;);
                }

                /**
                  * @param none
                  *
                  * @return void
                  **/
                public void finish2() {
                        logger.debug(&quot;Processing: finish2&quot;);
                }

                /**
                  * @param none
                  *
                  * @return void
                  **/
                public void retry() {
                        logger.debug(&quot;Processing: retry&quot;);
                }

                /**
                  * @param none
                  *
                  * @return void
                  **/
                public void decision2() {
                        logger.debug(&quot;Processing: decision2&quot;);
                }

                /**
                  * @param none
                  *
                  * @return void
                  **/
                public void termination() {
                        logger.debug(&quot;Processing: termination&quot;);
                }

                /**
                  * @param none
                  *
                  * @return void
                  **/
                public void accounting() {
                        logger.debug(&quot;Processing: accounting&quot;);
                }

                /**
                  * @param none
                  *
                  * @return void
                  **/
                public void legal() {
                        logger.debug(&quot;Processing: legal&quot;);
                }

        /**
         * Events
         */

                /**
                  * @param none
                  *
                  * @return void
                  **/
                public void onEnteringNodeMove() {
                        logger.debug(&quot;Processing: onEnteringNodeMove&quot;);
                }

                /**
                  * @param none
                  *
                  * @return void
                  **/
                public void onEnteringNodeTermination() {
                        logger.debug(&quot;Processing: onEnteringNodeTermination&quot;);
                }

                /**
                  * @param none
                  *
                  * @return void
                  **/
                public void onEnteringNodeError() {
                        logger.debug(&quot;Processing: onEnteringNodeError&quot;);
                }

}
&lt;/code&gt;&lt;/pre&gt;
</content>
 </entry>
 
 <entry>
   <title>Alfresco multi tenant IMAP4 and mount.davfs</title>
   <link href="http://jckermagoret.github.io/blogs/blog-jckermagoret/2011/03/12/Alfresco_multi-tenant_IMAP4_and_mount.davfs"/>
   <updated>2011-03-12T00:00:00+01:00</updated>
   <id>http://jckermagoret.github.io/blogs/blog-jckermagoret/2011/03/12/Alfresco_multi-tenant_IMAP4_and_mount.davfs</id>
   <content type="html">&lt;h1&gt;Use Case&lt;/h1&gt;

&lt;p&gt;In a multi-tenant Alfresco, I want to be able to use IMAP4, which is not supported in this situation, except for the host (the main tenant).&lt;/p&gt;

&lt;p&gt;A work around consists in mounting other tenants through webdav to be able to copy content from one tenant to another, and then to extract meta-data through a content rule. This feature sounds like the replicate one which is unfortunately unavailable on multi-tenant systems.&lt;/p&gt;

&lt;h1&gt;Summary&lt;/h1&gt;

&lt;p&gt;The Alfresco host server acts like the main tenant which receives mails for other tenants then, through webdav, copied them to other tenants.&lt;/p&gt;

&lt;p&gt;In very short, Replicate = WebDAV + Content Rule&lt;/p&gt;

&lt;h1&gt;Solution&lt;/h1&gt;

&lt;p&gt;The solution is based on mount.davfs.&lt;/p&gt;

&lt;p&gt;You can install it through the davfs debian package. Just do:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;apt-get install davfs
&lt;/code&gt;&lt;/pre&gt;

&lt;h1&gt;Mount.davfs Configuration&lt;/h1&gt;

&lt;p&gt;You then need to edit:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;/etc/davfs/secrets, to indicate for each mount point the user and passwd to use&lt;/li&gt;
&lt;li&gt;/etc/davfs/certs/yourserver.pem, to indicate the certificate for your alfresco webdav server, using SSL&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;My /etc/davfs/secrets file contains the following:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;/mnt/davfs/test2-admin admin@test2 xxxx
/mnt/davfs/test1-admin admin@test1 xxxx
/mnt/davfs/demo2-admin admin@demo2 xxxx
/mnt/davfs/demo1-admin admin@demo1 xxxx
/mnt/davfs/main-admin admin xxxx
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;where xxxx must be replaced by your password for each tenant. You can of course make some mountings with other user accounts than the admin one.&lt;/p&gt;

&lt;p&gt;You can then mount your webdav server on your mount point. For example:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;mount -t davfs https://your.alfresco.server/alfresco/webdav /mnt/davfs/main-admin
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;where /mnt/davfs/main-admin is a directory you created before the mount command&lt;/p&gt;

&lt;p&gt;You can then use your remote alfresco server like any usual file systems and copies the data.&lt;/p&gt;

&lt;p&gt;For example, I do:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;cp -rf /mnt/davfs/main-admin/Imap\ Home/admin/INBOX/Alfresco/* /mnt/davfs/test1-admin/Sites/test1/documentLibrary/test/Alfresco
&lt;/code&gt;&lt;/pre&gt;

&lt;h1&gt;Meta-data Extraction Through Content Rule&lt;/h1&gt;

&lt;p&gt;E-mails are now available in my tenant, but they aren't seen like emails. So, I need to extract the meta-data corresponding to e-mails. To achieve that, I just have to create a content rule which will be triggered on new elements. This content rule will extract common meta-data from freshly copied emails.&lt;/p&gt;

&lt;h1&gt;Conclusion&lt;/h1&gt;

&lt;p&gt;It's a little hacky but it does the job!!!&lt;/p&gt;

&lt;h1&gt;Resources&lt;/h1&gt;

&lt;ul&gt;
&lt;li&gt;http://linux.die.net/man/8/mount.davfs&lt;/li&gt;
&lt;li&gt;http://www.linuxquestions.org/questions/linux-software-2/force-accept-certificates-when-using-mount-davfs-632056/ to automatically accept certificates when mounting the WebDAV resource with SSL&lt;/li&gt;
&lt;/ul&gt;

</content>
 </entry>
 
 <entry>
   <title>imapsync and Alfresco</title>
   <link href="http://jckermagoret.github.io/blogs/blog-jckermagoret/2011/03/01/imapsync_and_Alfresco"/>
   <updated>2011-03-01T00:00:00+01:00</updated>
   <id>http://jckermagoret.github.io/blogs/blog-jckermagoret/2011/03/01/imapsync_and_Alfresco</id>
   <content type="html">&lt;h1&gt;Use case&lt;/h1&gt;

&lt;p&gt;The YaMma (Yet Another Mail Management Application) project aims at managing mails and emails. So we want a way to input emails into the repository, which is for instance an Alfresco one. Moreover, Alfresco provides IMAP support but it lacks one important feature -IMAPS, has one important bug -folder doesn't refresh quickly, a huge drawback -the necessity to configure a new IMAP account on each customer computer.&lt;/p&gt;

&lt;h1&gt;Solution&lt;/h1&gt;

&lt;p&gt;To circumvent all these problems, there is a very simple solution, which only consists to create a folder, called Alfresco for example, in each already existing IMAP account of our customers. Then, we'll just need to synchronize this one with the existing IMAP account each customer has. We avoid the 3 previous drawbacks:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;no security hole: imapsync supports SSL so by using it on my Alfresco server, I can connect to host1 with IMAPS and to host2 with IMAP through localhost which is safe&lt;/li&gt;
&lt;li&gt;my Alfresco folder is always updated like my other mail folders, no refresh problem anymore&lt;/li&gt;
&lt;li&gt;no need to install anything on the customer's computer&lt;/li&gt;
&lt;/ul&gt;


&lt;h1&gt;Which Software?&lt;/h1&gt;

&lt;p&gt;I had a look at imap synchronization software. I noticed isync and imapsync:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;iSync was interesting but there was a final bug preventing me to make things work&lt;/li&gt;
&lt;li&gt;imapsync made finally the job but the final solution needed a few hours to get everything ok. So, here is the solution.&lt;/li&gt;
&lt;/ul&gt;


&lt;h1&gt;Installation&lt;/h1&gt;

&lt;p&gt;First, make :&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;apt-get install imapsync&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;This will install the required libraries for imapsync. Then, go on fedorahosted and get the last available imapsync version (1.434 the 2011-05-25).&lt;/p&gt;

&lt;p&gt;If you are using debian Squeeze, imapsync seems not to be available anymore. Don't worry, just add the following into your /etc/apt/sources.list to use the package available for lenny:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;deb http://ftp.debian.org/debian lenny main contrib
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Then update your sources with the following:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;apt-get update
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Then just do:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;tar xzvf imapsync-xxx.tgz
cd imapsync-xxx
perl -MCPAN -e shell
install Mail::IMAPClient
make install
&lt;/code&gt;&lt;/pre&gt;

&lt;h1&gt;Synchronization&lt;/h1&gt;

&lt;p&gt;It's now time to write a little script, called for example imapsync.sh, to make the migration occur. Note that host2 is the server where my Alfresco server resides. On host1 resides my IMAP server with my mailbox. I created an Alfresco folder in it and I only synchronized this one.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;!/bin/sh
imapsync \
       -host1 yourhost1 -ssl1 -user1 mylogin@bluexml.com -passfile1 pass1.txt -folder INBOX.Alfresco \
       -host2 localhost -prefix2 &quot;INBOX/&quot; -sep2 &quot;/&quot; -user2 myLoginOnAlfresco -passfile2 pass2.txt \
       -useheader Subject -useheader Date \
       -noauthmd5 -syncinternaldates
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;If you want some debug information, just add debug debugimap.&lt;/p&gt;

&lt;p&gt;Finally, just type the following:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;sh imapsync.sh
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;If you make a man imapsync, you'll find a very interesting script to synchronize a set of mailboxes with different users and passwords. The script may be very easily updated to indicate also the folder you want to synchronize.&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>Observer Pattern Server Side Implementation</title>
   <link href="http://jckermagoret.github.io/blogs/blog-jckermagoret/2011/02/25/Observer_Pattern_Server_Side_Implementations"/>
   <updated>2011-02-25T00:00:00+01:00</updated>
   <id>http://jckermagoret.github.io/blogs/blog-jckermagoret/2011/02/25/Observer_Pattern_Server_Side_Implementations</id>
   <content type="html">&lt;p&gt;You just discovered Observer pattern in javascript on the client, and we already talk about server side implementations.&lt;/p&gt;

&lt;h1&gt;What does server side implementation add?&lt;/h1&gt;

&lt;p&gt;This means that once you developed the Observer pattern on your client side application, you can very easily extend it to provide easy and widespread messaging interop among languages, platforms and brokers. This basically means you can communicate messages to a lot of others users.&lt;/p&gt;

&lt;p&gt;Server side implementation may be done through CometD, which is now part of dojo, which enable you to build very simple chat application for the most straight forward use case.&lt;/p&gt;

&lt;h1&gt;Conclusion&lt;/h1&gt;

&lt;p&gt;When writing these posts, I found the following resources which may be of interest:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;http://almaer.com/blog/enjoying-the-observer-pattern-with-custom-events&lt;/li&gt;
&lt;li&gt;http://stackoverflow.com/questions/390740/messaging-queues-and-esbs-i-know-where-i-want-to-be-but-not-how-to-get-there&lt;/li&gt;
&lt;/ul&gt;

</content>
 </entry>
 
 <entry>
   <title>Observer Pattern multi framework implementation</title>
   <link href="http://jckermagoret.github.io/blogs/blog-jckermagoret/2011/02/24/Observer_Pattern_Multi_Framework_Implementation"/>
   <updated>2011-02-24T00:00:00+01:00</updated>
   <id>http://jckermagoret.github.io/blogs/blog-jckermagoret/2011/02/24/Observer_Pattern_Multi_Framework_Implementation</id>
   <content type="html">&lt;p&gt;We have seen in the previous posts how to use Observer Pattern in dojo and jQuery. But first, why do we bother at building such a unified solution?&lt;/p&gt;

&lt;p&gt;Why such a requirement?&lt;/p&gt;

&lt;p&gt;I have 2 main reasons:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;I can use it the same way whatever the context I am in. I don't want to remember the specific syntax for a specific framework. It makes code understandability easier.&lt;/li&gt;
&lt;li&gt;I can work simultaneously with various frameworks.&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;For example, in Alfresco Share, I wrote a code snippet to use dojo in the document-details view to extend the way meta data are displayed in a more friendly UI. But this extension uses dojo and Alfresco Share is based on Y!UI. So I need to interact from Y!UI with dojo and vice-versa. Architecture may evolve and I could need to interact with jquery components, so such an Observer implementation may help.&lt;/p&gt;

&lt;p&gt;In short:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;one publish will forward the publish on all the available Observer implementation&lt;/li&gt;
&lt;li&gt;one subscribe will subscribe the component on all the available Observer implementation&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;Moreover by this way I can add specific code for debugging purposes.&lt;/p&gt;

&lt;h1&gt;Observer Implementation&lt;/h1&gt;

&lt;pre&gt;&lt;code&gt;Observer = {
        log: new log4javascript.getLogger(&quot;SIDE.Observer&quot;),

        subscribe: function(channel, subscriber) {
                if (Observer.log.isDebugEnabled()) {
                        Observer.log.debug(&quot;Observer - Subscribing&quot;);
                        Observer.log.debug(&quot;Channel : &quot; + channel);
                }
                // Dojo
                dojo.subscribe(channel, subscriber);
                // jQuery
                document.bind(channel, subscriber);
                // Y!UI, ExtJS, ...
        },

        publish: function(channel, message) {
                if (Observer.log.isDebugEnabled()) {
                        Observer.log.debug(&quot;Observer - Publishing&quot;);
                        Observer.log.debug(&quot;Channel : &quot;, channel);
                        Observer.log.debug(&quot;Message : &quot;, message[0]);
                }
                // Dojo
                dojo.publish(channel, message);
                // jQuery
                document.trigger(channel, message);
                // Y!UI, ExtJS, ...
        }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;For the use of log4javascript, please refer to my previous post.&lt;/p&gt;

&lt;p&gt;Any comments?&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>Observer Pattern jQuery usage</title>
   <link href="http://jckermagoret.github.io/blogs/blog-jckermagoret/2011/02/23/Observer_Pattern_jQuery_usage"/>
   <updated>2011-02-23T00:00:00+01:00</updated>
   <id>http://jckermagoret.github.io/blogs/blog-jckermagoret/2011/02/23/Observer_Pattern_jQuery_usage</id>
   <content type="html">&lt;p&gt;If I take the example back, I just have to add the js corresponding to jQuery. I finally get the following html page:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;lt;html&amp;gt;
&amp;lt;head&amp;gt;
        &amp;lt;script src=&quot;http://ajax.googleapis.com/ajax/libs/jquery/1.4/jquery.min.js&quot;&amp;gt;&amp;lt;/script&amp;gt;
&amp;lt;/head&amp;gt;
&amp;lt;body&amp;gt;
        &amp;lt;div id=&quot;menu&quot;&amp;gt;
                        &amp;lt;h1&amp;gt;Menu&amp;lt;/h1&amp;gt;
                &amp;lt;ul&amp;gt;
                        &amp;lt;li&amp;gt;&amp;lt;a href=&quot;javascript:OldWay()&quot;&amp;gt;Old way&amp;lt;/a&amp;gt;&amp;lt;/li&amp;gt;
                        &amp;lt;li&amp;gt;&amp;lt;a href=&quot;javascript:ObserverWay()&quot;&amp;gt;Observer way&amp;lt;/a&amp;gt;&amp;lt;/li&amp;gt;
                &amp;lt;/ul&amp;gt;
        &amp;lt;/div&amp;gt;
        &amp;lt;div id=&quot;contentPortlet&quot;&amp;gt;
                &amp;lt;h1&amp;gt;Content&amp;lt;/h1&amp;gt;
                &amp;lt;div id=&quot;content&quot;&amp;gt;&amp;lt;/div&amp;gt;
        &amp;lt;/div&amp;gt;
        &amp;lt;div id=&quot;metadataPortlet&quot;&amp;gt;
                &amp;lt;h1&amp;gt;Detail&amp;lt;/h1&amp;gt;
                &amp;lt;div id=&quot;metadata&quot;&amp;gt;&amp;lt;/div&amp;gt;
        &amp;lt;/div&amp;gt;
&amp;lt;/body&amp;gt;
&amp;lt;/html&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;I now add the event mechanism through the use of the bind and trigger functions.&lt;/p&gt;

&lt;p&gt;The bind action takes 2 arguments:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;the event name&lt;/li&gt;
&lt;li&gt;the function to call&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;The following code snippet will make the contentPortlet listen to the info event:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;doc.bind('info', contentPortlet);
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;An event is triggered by simply calling the trigger action with the event name, with optional parameters:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;doc.trigger('info', 'View Updated Through The Old Way');
&amp;lt;script type=&quot;text/javascript&quot;&amp;gt;

        var doc = $(document); // just a shortcut

        var contentPortlet = function(event, message) {
                // replace the content div by the message received
                // when the event has been triggered
                $('#content').html('Content ' + message);
        }

        var metadataPortlet = function(event, message) {
                // replace the metadata div by the message received
                // when the event has been triggered
                $('#metadata').html('Metadata ' + message);
        }

        doc.bind('info', contentPortlet);
        doc.bind('info', metadataPortlet);

        function ObserverWay() {
                doc.trigger('info', 'View Updated Through The Old Way');
        }

&amp;lt;/script&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;As you noticed, all these components are coupled in a very agile way. We could configure (bind) content and metadata portlets so they listen to other events.&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>Observer Pattern dojo usage</title>
   <link href="http://jckermagoret.github.io/blogs/blog-jckermagoret/2011/02/22/Observer_Pattern_dojo_usage"/>
   <updated>2011-02-22T00:00:00+01:00</updated>
   <id>http://jckermagoret.github.io/blogs/blog-jckermagoret/2011/02/22/Observer_Pattern_dojo_usage</id>
   <content type="html">&lt;p&gt;Let's take our previous code and replace jQuery mechanism by dojo:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;replace jquery lib by dojo lib&lt;/li&gt;
&lt;li&gt;replace bind by subscribe&lt;/li&gt;
&lt;li&gt;replace trigger by publish&lt;/li&gt;
&lt;li&gt;replace jquery sugar by dojo one&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;Then transform the parameter passed when the trigger is fired as an array:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;'View Updated Through The Old Way' becomes 'View Updated Through The Old Way'&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;and remove the event from the content and metadata portlet. You don't need them anymore. If required, you can forward them in the parameters when the event is triggered.&lt;/p&gt;

&lt;p&gt;You now have the following code:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;lt;html&amp;gt;
&amp;lt;head&amp;gt;
        &amp;lt;script src=&quot;https://ajax.googleapis.com/ajax/libs/dojo/1.5/dojo/dojo.xd.js&quot;&amp;gt;&amp;lt;/script&amp;gt;

        &amp;lt;script type=&quot;text/javascript&quot;&amp;gt;

                var doc = document;

                var contentPortlet = function(message) {
                        dojo.byId(&quot;content&quot;).innerHTML = 'Content ' + message;
                }

                var metadataPortlet = function(message) {
                        dojo.byId(&quot;metadata&quot;).innerHTML = 'Metadata ' + message;
                }

                dojo.subscribe('info', contentPortlet);
                dojo.subscribe('info', metadataPortlet);

                function OldWay() {
                   var content = document.getElementById('content');
                   var metadata = document.getElementById('metadata');

                   content.innerHTML = &quot;Content View Updated Through The Old Way&quot;;
                   metadata.innerHTML = &quot;Metadata View Updated Through The Old Way&quot;;
                }

                function ObserverWay() {
                        dojo.publish('info', ['View Updated Through The Old Way']);
                }

        &amp;lt;/script&amp;gt;

&amp;lt;/head&amp;gt;
&amp;lt;body&amp;gt;
        &amp;lt;div id=&quot;menu&quot;&amp;gt;
                        &amp;lt;h1&amp;gt;Menu&amp;lt;/h1&amp;gt;
                &amp;lt;ul&amp;gt;
                        &amp;lt;li&amp;gt;&amp;lt;a href=&quot;javascript:OldWay()&quot;&amp;gt;Old way&amp;lt;/a&amp;gt;&amp;lt;/li&amp;gt;
                        &amp;lt;li&amp;gt;&amp;lt;a href=&quot;javascript:ObserverWay()&quot;&amp;gt;Observer way&amp;lt;/a&amp;gt;&amp;lt;/li&amp;gt;
                &amp;lt;/ul&amp;gt;
        &amp;lt;/div&amp;gt;
        &amp;lt;div id=&quot;contentPortlet&quot;&amp;gt;
                &amp;lt;h1&amp;gt;Content&amp;lt;/h1&amp;gt;
                &amp;lt;div id=&quot;content&quot;&amp;gt;&amp;lt;/div&amp;gt;
        &amp;lt;/div&amp;gt;
        &amp;lt;div id=&quot;metadataPortlet&quot;&amp;gt;
                &amp;lt;h1&amp;gt;Detail&amp;lt;/h1&amp;gt;
                &amp;lt;div id=&quot;metadata&quot;&amp;gt;&amp;lt;/div&amp;gt;
        &amp;lt;/div&amp;gt;
&amp;lt;/body&amp;gt;
&amp;lt;/html&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Any comments?&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>Observer Pattern Comparison Beetween jQuery, Dojo and YUI</title>
   <link href="http://jckermagoret.github.io/blogs/blog-jckermagoret/2011/02/21/Observer_Pattern_Comparison_Beetween_jQuery%2C_Dojo_and_YUI"/>
   <updated>2011-02-21T00:00:00+01:00</updated>
   <id>http://jckermagoret.github.io/blogs/blog-jckermagoret/2011/02/21/Observer_Pattern_Comparison_Beetween_jQuery,_Dojo_and_YUI</id>
   <content type="html">&lt;h1&gt;Observer Pattern: The Graal of The Developer&lt;/h1&gt;

&lt;p&gt;In a very few words, this pattern enables to build agile software architecture by decoupling objects which produce information and objects which consume it. For example, it is really useful to update user interfaces after an event happens.&lt;/p&gt;

&lt;p&gt;First, we're going to deal with a very simple use case and provide a solution without and with this pattern (based on an algorithmic solution) to describe the problem
Then, we'll provide a concrete solution in jQuery, Dojo and Y!UI to be able to compare them
Then, we'll suggest a unified approach so we can use observer mechanism in an application with all these 3 frameworks. This solution can be extended to use other frameworks too.
At last, we'll conclude with a few thoughts about server-side observer implementation like Cometd
This approach will finally be used at the end of the tutorial to customize the metadata component of the document details page in Alfresco Share.&lt;/p&gt;

&lt;h1&gt;The Use Case&lt;/h1&gt;

&lt;p&gt;Let's imagine we have 3 components in an html page. These components are 3 divs named menu, content and details. We have in the menu an action to update menu and details:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;lt;html&amp;gt;
&amp;lt;body&amp;gt;
        &amp;lt;div id=&quot;menu&quot;&amp;gt;
                &amp;lt;ul&amp;gt;
                        &amp;lt;li&amp;gt;&amp;lt;a href=&quot;javascript:OldWay()&quot;&amp;gt;Old way&amp;lt;/a&amp;gt;&amp;lt;/li&amp;gt;
                        &amp;lt;li&amp;gt;&amp;lt;a href=&quot;javascript:ObserverWay()&quot;&amp;gt;Observer way&amp;lt;/a&amp;gt;&amp;lt;/li&amp;gt;
                &amp;lt;/ul&amp;gt;
        &amp;lt;/div&amp;gt;
        &amp;lt;div id=&quot;content&quot;&amp;gt;Content&amp;lt;/div&amp;gt;
        &amp;lt;div id=&quot;metadata&quot;&amp;gt;Detail&amp;lt;/div&amp;gt;
&amp;lt;/body&amp;gt;
&amp;lt;/html&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;h1&gt;The solution without Observer Pattern&lt;/h1&gt;

&lt;p&gt;To achieve the requirements, you would write the OldWay javascript function like that:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;function OldWay() {

   var content = document.getElementById('content');
   var metadata = document.getElementById('metadata');
   content.innerHTML = &quot;Content View Updated Through The Old Way&quot;;
   metadata.innerHTML = &quot;Metadata View Updated Through The Old Way&quot;;
   alert(&quot;Success&quot;);
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This solution works very well but as you noticed, the OldWay function must know the components to update. It is a very annoying point. Our components are strongly coupled: it's a very bad design.&lt;/p&gt;

&lt;h1&gt;The Observer Pattern Based Solution&lt;/h1&gt;

&lt;p&gt;The following lines are not true code, rather alogrithmic ones.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;function ObserverWay() {

   Publish(&quot;/info&quot;, &quot;update&quot;)
}

function UpdateContent() {

   content.innerHTML = &quot;Content Updated Through The Old Way&quot;;
}

function UpdateMetadata() {

   content.innerHTML = &quot;Content Updated Through The Old Way&quot;;
}

Subscribe(&quot;/info&quot;, UpdateContent()); Subscribe(&quot;/info&quot;, UpdateMetadata());
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;We now have 3 functions, completely independant:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;one publisher, ObserverWay, which produces some information&lt;/li&gt;
&lt;li&gt;two consumers, UpdateContent and UpdateMetadata, which consume information&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;The communication beetween producers and consumers is done through the info channel on which the first publishes some information while the others subscribe (or listen) to it.&lt;/p&gt;

&lt;p&gt;In this architecture, if we add a new component, it just has to subscribe to the channels it is interested with, without disturbing the architecture.&lt;/p&gt;

&lt;p&gt;We'll see next time the unified approach I suggest to use.&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>Fuse and OpenVZ</title>
   <link href="http://jckermagoret.github.io/blogs/blog-jckermagoret/2011/02/01/Fuse_and_OpenVZ"/>
   <updated>2011-02-01T00:00:00+01:00</updated>
   <id>http://jckermagoret.github.io/blogs/blog-jckermagoret/2011/02/01/Fuse_and_OpenVZ</id>
   <content type="html">&lt;h1&gt;Use Case&lt;/h1&gt;

&lt;p&gt;To be able to use mount.davfs, I need to install fuse.&lt;/p&gt;

&lt;p&gt;My problem is I'm on a virtual machine, based on OpenVZ.&lt;/p&gt;

&lt;h1&gt;Problem&lt;/h1&gt;

&lt;p&gt;When installing fuse-utils through apt-get, everything went fine but mount.davfs doesn't work and give a short: /sbin/mount.davfs: can't open /dev/fuse&lt;/p&gt;

&lt;p&gt;This process works smoothly on a virtual machine based on Fully Virtualized (KVE) but not on an OpenVZ&lt;/p&gt;

&lt;h1&gt;Diagnostic&lt;/h1&gt;

&lt;p&gt;In OpenVZ, in contrast with KVE, virtual machines share with host node kernel modules and devices. This means 2 important hings:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;the host node must have any module you want to use on virtual machines&lt;/li&gt;
&lt;li&gt;the host node must create devices and give permissions to virtual machines to use them&lt;/li&gt;
&lt;/ul&gt;


&lt;h1&gt;Solution&lt;/h1&gt;

&lt;p&gt;So, I needed, where $CTID is the container ID:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;to install fuse-utils on host node: apt-get install fuse-utils&lt;/li&gt;
&lt;li&gt;to install fuse-utils on the required container&lt;/li&gt;
&lt;li&gt;to create device on the host node through the following command: vzctl set $CTID --devnodes fuse:rw&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;And finally, for the new module to be available, restart the container:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;vzctl restart $CTID
&lt;/code&gt;&lt;/pre&gt;

&lt;h1&gt;Problem&lt;/h1&gt;

&lt;p&gt;The problems you may have are often related to /dev/fuse. You can have:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;/sbin/mount.davfs: /dev/fuse: permission denied&lt;/li&gt;
&lt;li&gt;/sbin/mount.davfs: can't open /dev/fuse&lt;/li&gt;
&lt;li&gt;/SBIN/MOUNT.DAVFS: /DEV/FUSE: PERMISSION DENIED&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;Your user is generally not in the right group, so add your user into fuse group and chmod 660 /dev/fuse. Ask google, a lot of people had this problem and solved it quickly (see 1).&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;/SBIN/MOUNT.DAVFS: CAN'T OPEN /DEV/FUSE&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;You probably first installed fuse on the virtual machine and the /dev/fuse device has so been created by your virtual machine but, as stated before, all kernel modules and devices are shared beetween the host node and containers. You can see it, with the right group and set of permissions, but you can't open it.&lt;/p&gt;

&lt;p&gt;You absolutely need to create the device in the Host Node. To do so, just remove it from the container (it means your virtual machine) with a plain &quot;rm /dev/fuse&quot; and create in the host node the corresponding /dev/fuse:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;vzctl set $CTID devices c:10:229:rw save
vzctl exec $CTID mknod /dev/fuse c 10 229
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;If you now look into /etc/vz/conf/$CTID.conf, you will see the following new line:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;DEVNODES=&quot;fuse:rw &quot;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Restart your container:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;vzctl restart $CTID
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;And, miracle, everything will run smoothly :-)&lt;/p&gt;

&lt;h1&gt;Resources&lt;/h1&gt;

&lt;ul&gt;
&lt;li&gt;http://www.nullamatix.com/fixed-fuse-failed-open-dev-fuse-permission-denied/&lt;/li&gt;
&lt;/ul&gt;

</content>
 </entry>
 
 <entry>
   <title>Reduce PDF size after 300ppp and color scan.md</title>
   <link href="http://jckermagoret.github.io/blogs/blog-jckermagoret/2011/01/13/Reduce_PDF_size_after_300ppp_and_color_scan"/>
   <updated>2011-01-13T00:00:00+01:00</updated>
   <id>http://jckermagoret.github.io/blogs/blog-jckermagoret/2011/01/13/Reduce_PDF_size_after_300ppp_and_color_scan</id>
   <content type="html">&lt;h1&gt;Use Case&lt;/h1&gt;

&lt;p&gt;To manage paper documents in YaMma (Yet Another Mail Management Application), I do the following actions:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;scan 24bits-colors, 300ppp for good quality&lt;/li&gt;
&lt;li&gt;process them to ocr&lt;/li&gt;
&lt;li&gt;reduce their size&lt;/li&gt;
&lt;li&gt;create a pdf with the text from ocr embedded into the pdf&lt;/li&gt;
&lt;li&gt;For a document of 17 pages, its size is about 170Mo after such a scan. While this quality is interesting for OCR, there are about 10K documents into the company intranet and I can't put a file with such a size into my content repository...&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;So the need for a solution to reduce the size of the document.&lt;/p&gt;

&lt;h1&gt;Solution&lt;/h1&gt;

&lt;p&gt;I can choose and configure my output from my scan:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;quality (100, 200, 300, 600, 1200ppp)&lt;/li&gt;
&lt;li&gt;color (B&amp;amp;W, 8, 16, 24 bits color)&lt;/li&gt;
&lt;li&gt;output type (pdf, image, ...)&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;I generally choose PDF output, 300ppp, 24 bits color and my scanner (a very cheap Brother DCP6690CW) finally creates such a file after creating a TIFF file for each page and concatenating them all together.&lt;/p&gt;

&lt;p&gt;To reduce file size, I then can:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;reduce all TIFF files through convert (ImageMagick) and concatenate them into a pdf one&lt;/li&gt;
&lt;li&gt;directly reduce PDF file through ghostscript (gs)&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;By following this second option (I haven't studied the first one), I'm able to easily get a PDF file of about 1-3Mo with an enough good quality to have a correct reading.&lt;/p&gt;

&lt;h1&gt;Usage&lt;/h1&gt;

&lt;p&gt;Just get a ghostscript installation for your system. Then choose the quality you are looking for (screen &amp;lt; ebook &amp;lt; prepress, ...)&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;gs -sDEVICE=pdfwrite -dCompatibilityLevel=1.4 -dPDFSETTINGS=/screen -dNOPAUSE -dQUIET -dBATCH -sOutputFile=output.pdf input.pdf
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;or&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;gs -sDEVICE=pdfwrite -dCompatibilityLevel=1.4 -dPDFSETTINGS=/ebook -dNOPAUSE -dQUIET -dBATCH -sOutputFile=output.pdf input.pdf
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;You can specify options for better quality or to produce PDF/X or PDF/A. Just have a look at the gs options on the manual. For a 160Mo PDF file, you will finally get a 1Mo file with screen option and 3Mo file with ebook one. Ebook quality is really better.&lt;/p&gt;

&lt;h1&gt;Pointers&lt;/h1&gt;

&lt;ul&gt;
&lt;li&gt;http://www.ubuntugeek.com/ubuntu-tiphowto-reduce-adobe-acrobat-file-size-from-command-line.html&lt;/li&gt;
&lt;li&gt;http://pages.cs.wisc.edu/~ghost/doc/cvs/Ps2pdf.htm&lt;/li&gt;
&lt;/ul&gt;

</content>
 </entry>
 
 <entry>
   <title>QRCode</title>
   <link href="http://jckermagoret.github.io/blogs/blog-jckermagoret/2011/01/13/QR_Code"/>
   <updated>2011-01-13T00:00:00+01:00</updated>
   <id>http://jckermagoret.github.io/blogs/blog-jckermagoret/2011/01/13/QR_Code</id>
   <content type="html">&lt;h1&gt;Introduction to zxing.org&lt;/h1&gt;

&lt;p&gt;I just discovered zxing.org a few days ago. It's an interesting tool to generate and analyze bar code and QR Codes.&lt;/p&gt;

&lt;p&gt;A QRCode stands for Quick Response Code and aims at replacing bar codes in the future. Here is an example of QRCode:&lt;/p&gt;

&lt;p&gt;&lt;img class=&quot;center&quot; src=&quot;http://www.myxph.com/photos/29315-qr-code-barcode-example-ets.png&quot; width=&quot;100px&quot; height=&quot;100px&quot;/&gt;&lt;/p&gt;

&lt;h1&gt;Advantages on bar codes&lt;/h1&gt;

&lt;p&gt;Bar code stores information in one dimension. QR Code stores information on 2 dimensions. You then can store more information, and this one ay be redundant so if your QRCode isn't complete, you can still get the information.&lt;/p&gt;

&lt;h1&gt;Download and compile&lt;/h1&gt;

&lt;p&gt;Just get the source on the svn server and compile core and javase modules. It's enough to use the command to extract the information from a QRCode&lt;/p&gt;

&lt;h1&gt;Test&lt;/h1&gt;

&lt;p&gt;By using the following command, you can extract the information stored into it a QRCode:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;java -cp javase/javase.jar:core/core.jar com.google.zxing.client.j2se.CommandLineRunner &quot;http://chart.apis.google.com/chart?cht=qr&amp;amp;chs=230x230&amp;amp;chl=MECARD%3AN%3AJean-Christophe+Kermagoret%3BTEL%3A%2B33240466278%3BURL%3Ahttp%3A%2F%2Fwww.bluexml.com%3BEMAIL%3Ajck-qrcode%40bluexml.com%3BADR%3A40%2C+bd+Jean+Ingres+44100+Nantes%3B%3B&quot;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This will give you the following results:&lt;/p&gt;

&lt;p&gt;Raw result:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;MECARD:N:Jean-Christophe Kermagoret;TEL:+33240466278;URL:http://www.bluexml.com;EMAIL:jck-qrcode@bluexml.com;ADR:40, bd Jean Ingres 44100 Nantes;;
Parsed result:
Jean-Christophe Kermagoret
40, bd Jean Ingres 44100 Nantes
+33240466278
jck-qrcode@bluexml.com
http://www.bluexml.com
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Also, there were 4 result points.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;Point 0: (39.0,191.0)
Point 1: (39.0,39.0)
Point 2: (191.0,39.0)
Point 3: (179.0,179.0)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;You can then parse the results very easily to take the right decision.&lt;/p&gt;

&lt;h1&gt;YaMma Use Case&lt;/h1&gt;

&lt;p&gt;I'm going to use this QRCode to add information manually on paper documents for the next version of the YaMma open source project, based on Alfresco, which deals with mail (paper and electronic) management. The document can then be acquired and analyzed through an OCR to get the previous information. If quality isn't enough, you can add the --try_harder parameter. The document will then be automatically filed into the right directory of your file plan.&lt;/p&gt;

&lt;h1&gt;Mobile Use Case&lt;/h1&gt;

&lt;p&gt;You can also use your phone mobile to extract the information. Install the i-nigma application on your iPhone and scan the QRCode above. You'll almost instantly get the information.&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>OpenVZ and disk share with volume group and logical volumes</title>
   <link href="http://jckermagoret.github.io/blogs/blog-jckermagoret/2011/01/10/OpenVZ_and_disk_share_with_volume_group_and_logical_volumes"/>
   <updated>2011-01-10T00:00:00+01:00</updated>
   <id>http://jckermagoret.github.io/blogs/blog-jckermagoret/2011/01/10/OpenVZ_and_disk_share_with_volume_group_and_logical_volumes</id>
   <content type="html">&lt;h1&gt;Use case&lt;/h1&gt;

&lt;p&gt;I have a virtual system with a main host and various virtual machines. I want these virtual machines to have some directories shared with the main host so the backup will be easier.&lt;/p&gt;

&lt;h1&gt;Solution&lt;/h1&gt;

&lt;p&gt;I mount a directory on my main host into the virtual machine. To be the more flexible possible, the mounted directory is based on a logical volume I can increase or decrease according to my needs.&lt;/p&gt;

&lt;h1&gt;Implementation&lt;/h1&gt;

&lt;p&gt;On your main host, create a logical volume and format it. For example, if you have a volume group called data, you could do this:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;lvcreate -L20G -n vz106 data
mkfs.ext3 /dev/data/vz106
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This creates a /dev/data/vz106, which corresponds to a 20GB disk, on your system. This new disk can now be mounted on a directory which is inside one of your container:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;mount -n --bind /data/vz/106 /var/lib/vz/root/106/data
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;To make everything automatic during the reboot, you can create corresponding files in your /etc/vz directory. On my system, I have:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;/etc/vz/conf/106.mount:

/etc/vz/106.unmount:
&lt;/code&gt;&lt;/pre&gt;
</content>
 </entry>
 
 
</feed>